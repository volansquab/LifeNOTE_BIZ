@page
@model IndexModel
@{
    ViewData["Title"] = "LifeNOTE";
}


@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


@if (@IndexModel.screenmode == "exdoc1")
{
    <!doctype html>
    <html>
    <head>
        <link rel="apple-touch-icon" sizes="57x57" href="./apple-icon-57x57.png">
        <link rel="apple-touch-icon" sizes="60x60" href="./apple-icon-60x60.png">
        <link rel="apple-touch-icon" sizes="72x72" href="./apple-icon-72x72.png">
        <link rel="apple-touch-icon" sizes="76x76" href="./apple-icon-76x76.png">
        <link rel="apple-touch-icon" sizes="114x114" href="./apple-icon-114x114.png">
        <link rel="apple-touch-icon" sizes="120x120" href="./apple-icon-120x120.png">
        <link rel="apple-touch-icon" sizes="144x144" href="./apple-icon-144x144.png">
        <link rel="apple-touch-icon" sizes="152x152" href="./apple-icon-152x152.png">
        <link rel="apple-touch-icon" sizes="180x180" href="./apple-icon-180x180.png">
        <link rel="icon" type="image/png" sizes="192x192" href="./android-icon-192x192.png">
        <link rel="icon" type="image/png" sizes="32x32" href="./favicon-32x32.png">
        <link rel="icon" type="image/png" sizes="96x96" href="./favicon-96x96.png">
        <link rel="icon" type="image/png" sizes="16x16" href="./favicon-16x16.png">
        <link rel="manifest" href="./manifest.json">
        <meta name="msapplication-TileColor" content="#ffffff">
        <meta name="msapplication-TileImage" content="./ms-icon-144x144.png">
        <meta name="theme-color" content="#ffffff">
        <title>Life NOTE</title>
        @*<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous" />*@
        <style type="text/css">
            .intLink {
                cursor: pointer;
            }

            img.intLink {
                border: 0;
            }

            #toolBar1 select {
                font-size: 10px;
            }

            #textBox {
                width: 540px;
                height: 300px;
                border: 1px #000000 solid;
                padding: 12px;
                overflow: scroll;
                background: #ffffff;
                position: relative;
            }

                #textBox #sourceText {
                    padding: 0;
                    margin: 0;
                    min-width: 498px;
                    min-height: 200px;
                }

            #editMode label {
                cursor: pointer;
            }

            body {
                background-image: url(bg_pattern_1.png); /* 背景画像指定 */
            }
            .backimage {
                background: @IndexModel.TabColours[@IndexModel.selecttab - 1];
                background-image: url(tab1.png); /* 背景画像指定 */
                border: 1px solid #999;
                height: 100%;
            }

        </style>
    </head>

    <body onload="initDoc();">
        <form name="compForm" method="post" onsubmit="if(validateMode()){this.myDoc.value=oDoc.innerHTML;return true;}return false;">
            @*<div class="backcolour" style="margin-top: 15px;">*@
            <div class="backimage" style="margin-top: 15px;">
                <input type="text" name="title"  id="title" value="@IndexModel.title" style="width: 95%; margin-left: 15px; margin-top: 15px; margin-right:30px"><br>
                <input type="text" name="msg"  id="msg" disabled="disabled" style="width: 95%;margin-left: 15px; margin-top: 15px; margin-right:30px"><br>
                <input type="hidden" name="myDoc">
                <div class="row" style="width: 95%; margin-left: 15px">
                    @*<div id="toolBar1">*@
                        <div class="itemtitle col-md-6">
                            @*<div id="toolBar2" style="width: 95%; margin-left: 15px">*@
                                <img class="intLink" style="width :40px; height :40px" title="印刷" onclick="printDoc();" src="Print.png">
                                <img class="intLink" style="width :40px; height :40px" title="戻る" onclick="formatDoc('undo');" src="Undo.png" />
                                <img class="intLink" style="width :40px; height :40px" title="進む" onclick="formatDoc('redo');" src="Redo.png" />
                                <img class="intLink" style="width :40px; height :40px" title="フォーマット削除" onclick="formatDoc('removeFormat')" src="Remove formatting.png">
                                <img class="intLink" style="width :40px; height :40px" title="太字" onclick="formatDoc('bold');" src="Bold.png" />
                                <img class="intLink" style="width :40px; height :40px" title="イタリック" onclick="formatDoc('italic');" src="Italic.png" />
                                <img class="intLink" style="width :40px; height :40px" title="下線" onclick="formatDoc('underline');" src="Underline.png" />
                                <img class="intLink" style="width :40px; height :40px" title="左揃え" onclick="formatDoc('justifyleft');" src="Left align.png" />
                                <img class="intLink" style="width :40px; height :40px" title="中央揃え" onclick="formatDoc('justifycenter');" src="Center align.png" />
                                <img class="intLink" style="width :40px; height :40px" title="右揃え" onclick="formatDoc('justifyright');" src="Right align.png" />
                                <img class="intLink" style="width :40px; height :40px" title="ナンバリング" onclick="formatDoc('insertorderedlist');" src="Numbered list.png" />
                                <img class="intLink" style="width :40px; height :40px" title="箇条書" onclick="formatDoc('insertunorderedlist');" src="Dotted list.png" />
                                <img class="intLink" style="width :40px; height :40px" title="インデント削除" onclick="formatDoc('outdent');" src="Delete indentation.png" />
                                <img class="intLink" style="width :40px; height :40px" title="インデント追加" onclick="formatDoc('indent');" src="Add indentation.png" />
                                <img class="intLink" style="width :40px; height :40px" title="ハイパーリンク" onclick="var sLnk=prompt('Write the URL here','http:\/\/');if(sLnk&&sLnk!=''&&sLnk!='http://'){formatDoc('createlink',sLnk)}" src="Hyperlink.png" />
                                <img class="intLink" style="width :40px; height :40px" title="カット" onclick="formatDoc('cut');" src="Cut.png" />
                            @*</div> *@   
                        </div>
                        <div class="itemtitle col-md-6">
                            @*<div id="toolBar3" style="width: 95%; margin-left: 15px">*@
                                <select class="selectpicker pull-right" onchange="formatDoc('formatblock',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                                    <option selected>フォーマット</option>
                                    <option value="h1">タイトル 1 &lt;h1&gt;</option>
                                    <option value="h2">タイトル 2 &lt;h2&gt;</option>
                                    <option value="h3">タイトル 3 &lt;h3&gt;</option>
                                    <option value="h4">タイトル 4 &lt;h4&gt;</option>
                                    <option value="h5">タイトル 5 &lt;h5&gt;</option>
                                    <option value="h6">サブタイトル &lt;h6&gt;</option>
                                    <option value="p">パラグラフ &lt;p&gt;</option>
                                    <option value="pre">プリフォーマット &lt;pre&gt;</option>
                                </select>
                                <select class="selectpicker pull-right" onchange="formatDoc('fontname',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                                    <option class="heading" selected>フォント</option>
                                    <option>Arial</option>
                                    <option>Arial Black</option>
                                    <option>Courier New</option>
                                    <option>Times New Roman</option>
                                    <option>ＭＳ ゴシック</option>
                                    <option>ＭＳ Ｐゴシック</option>
                                    <option>ＭＳ 明朝</option>
                                    <option>ＭＳ Ｐ明朝</option>
                                    <option>Impact</option>

                                </select>

                                <select class="selectpicker pull-right" onchange="formatDoc('fontsize',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                                    <option class="heading" selected>サイズ</option>
                                    <option value="1">極小</option>
                                    <option value="2">小</option>
                                    <option value="3">標準</option>
                                    <option value="4">中大</option>
                                    <option value="5">大</option>
                                    <option value="6">大大</option>
                                    <option value="7">最大</option>
                                </select>
                                <select class="selectpicker pull-right" onchange="formatDoc('forecolor',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                                    <option class="heading" selected>色</option>
                                    <option value="red">赤</option>
                                    <option value="blue">青</option>
                                    <option value="green">緑</option>
                                    <option value="black">黒</option>
                                </select>
                                <select class="selectpicker pull-right" onchange="formatDoc('backcolor',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                                    <option class="heading" selected>背景</option>
                                    <option value="red">赤</option>
                                    <option value="green">緑</option>
                                    <option value="black">黒</option>
                                </select>
                                <img class="intLink" style="width: 40px; height: 40px; margin-left: 30px" title="縮小" onclick="Shrink()" src="shrinkt.png" />

                            </div>
                            <div id="loader">
                                <div class="sk-chase">
                                    <div class="sk-chase-dot"></div>
                                    <div class="sk-chase-dot"></div>
                                    <div class="sk-chase-dot"></div>
                                    <div class="sk-chase-dot"></div>
                                    <div class="sk-chase-dot"></div>
                                </div>
                            </div>
                    
    </div>
                        
                <div class="row">
                    <div class="itemtitle col-md-12">
                        <div id="textBox" contenteditable="true" style="width: auto; margin-left: 30px; margin-right: 30px"><p>@Html.Raw(IndexModel.bodyelement)</p></div>
                        <p id="editMode"><input type="hidden" name="switchMode" id="switchBox" onchange="setDocMode(this.checked);" /></p>
                        <input type="hidden" asp-for="Name" value="nd" />
                    </div>
                </div>
            </div>
        </form>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.15.0/umd/popper.min.js"></script>

        <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
        <script type="text/javascript">
    var oDoc, sDefTxt;
    var rtime;
    var timeout = false;
    var delta = 2000;
    const loader = document.getElementById('loader');
    loader.style = "display:none;";

    var chkstr = document.getElementById("textBox").innerHTML
    var chktitle = document.getElementById("title").value
    
    //自動保存本文
    const ev = function () {
        var chkstr2 = document.getElementById("textBox").innerHTML
        var chktitle2 = document.getElementById("title").value
        if (chkstr != chkstr2) {
            //自動保存処理
            textbody = document.getElementById('textBox').innerText;
            htmlbody = document.getElementById('textBox').innerHTML;
            document.getElementById('loader').style = "display: normal;";
            /*alert("start");*/
            const form = document.forms[0];
            FD = new FormData(form);
            // データを FormData オブジェクトに投入します
            /*FD.append("indx", 'pass');*/
            FD.append("evnt", "save");
            FD.append("textbody", textbody);
            FD.append("htmlbody", htmlbody);
            var main = document.getElementById('textBox');
            var sctop = main.scrollTop;
            FD.append("scrollTop", sctop);
            // aysnchronous fetch ajax
            fetch(form.action,
                {
                    method: form.method,
                    body: FD
                }
            )
                // if any exceptions - log them
                .catch(err => alert("network error: " + err))
                .then(response => {

                    // read json from the response stream
                    // and display the data
                    response.json().then(data => {

                        rtime = new Date();
                        if (timeout === false) {
                            timeout = true;
                            setTimeout(resizeend, delta);
                        }
                    });
                })
            chkstr = document.getElementById("textBox").innerHTML
        }
        if (chktitle != chktitle2) {
            //自動保存処理
            var title = document.getElementById("title").innerText;
            //alert(title);
            document.getElementById('loader').style = "display: normal;";
            const form = document.forms[0];
           
            FD = new FormData(form);
            // データを FormData オブジェクトに投入します

            FD.append("evnt", "tytlechanged");
            FD.append("title", title);
            fetch(form.action,
                {
                    method: form.method,
                    body: FD
                }
            )
                // if any exceptions - log them
                .catch(err => alert("network error: " + err))
                .then(response => {

                    // read json from the response stream
                    // and display the data
                    response.json().then(data => {

                        rtime = new Date();
                        if (timeout === false) {
                            timeout = true;
                            setTimeout(resizeend, delta);
                        }
                    });
                })
            chktitle = document.getElementById("title").value
        }
        
        
    };

    setInterval(ev, 1000);

            function stopWinClose(e) {
                e.preventDefault();
                e.returnValue = '';

            }

            function resizeend() {
                if (new Date() - rtime < delta) {
                    setTimeout(resizeend, delta);
                    window.addEventListener("beforeunload", stopWinClose, true);

                } else {
                    timeout = false;
                    /*alert("HIT");*/

                    window.removeEventListener("beforeunload", stopWinClose, true);

                    document.getElementById('loader').style = "display: none;";
                }
            }

    function initDoc() {
        oDoc = document.getElementById("textBox");
        oDoc.scrollTop = "@IndexModel.scrollloc";
        sDefTxt = oDoc.innerHTML;
        if (document.compForm.switchMode.checked) { setDocMode(true); }
    }

    function formatDoc(sCmd, sValue) {
        if (validateMode()) { document.execCommand(sCmd, false, sValue); oDoc.focus(); }
    }

    function validateMode() {
        if (!document.compForm.switchMode.checked) { return true; }
        alert("Uncheck \"Show HTML\".");
        oDoc.focus();
        return false;
    }

    function setDocMode(bToSource) {
        var oContent;
        if (bToSource) {
            oContent = document.createTextNode(oDoc.innerHTML);
            oDoc.innerHTML = "";
            var oPre = document.createElement("pre");
            oDoc.contentEditable = false;
            oPre.id = "sourceText";
            oPre.contentEditable = true;
            oPre.appendChild(oContent);
            oDoc.appendChild(oPre);
            document.execCommand("defaultParagraphSeparator", false, "div");
        } else {
            if (document.all) {
                oDoc.innerHTML = oDoc.innerText;
            } else {
                oContent = document.createRange();
                oContent.selectNodeContents(oDoc.firstChild);
                oDoc.innerHTML = oContent.toString();
            }
            oDoc.contentEditable = true;
        }
        oDoc.focus();
    }

    function printDoc() {
        if (!validateMode()) { return; }
        var oPrntWin = window.open("", "_blank", "width=450,height=470,left=400,top=100,menubar=yes,toolbar=no,location=no,scrollbars=yes");
        oPrntWin.document.open();
        oPrntWin.document.write("<!doctype html><html><head><title>Print<\/title><\/head><body onload=\"print();\">" + oDoc.innerHTML + "<\/body><\/html>");
        oPrntWin.document.close();
    }
    function chancelNew() {

        const form = document.forms[0];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("evnt", "newchancel");

        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    //textbox.innerHTML = data
                    document.location.reload();
                });
            })
    }
    function partialNew(title, textbody, htmlbody) {

        const form = document.forms[0];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("title", title);
        FD.append("textbody", textbody);
        FD.append("htmlbody", htmlbody);
        FD.append("indx", "pass");
        FD.append("evnt", "partialnew");

        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    //textbox.innerHTML = data
                    document.location.reload();
                });
            })
    }
    function Shrink() {

        const form = document.forms[0];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("evnt", "newchancel1");

        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    //textbox.innerHTML = data
                    document.location.reload();
                });
            })
    }
    // only one form - select it!
    const form = document.forms[0];
    // attach onsubmit
    // attach onsubmit
    var textstr2 = document.getElementById('textBox');
    textstr2.addEventListener("paste", async function (event) {
        setTimeout(function () {


            //ハイパーリンクの自動付与：ホームページ
            //var elms = document.getElementById('textBox').getElementsByTagName('div');
            var pasteText = document.getElementById('textBox').innerText;
            pasteText = pasteText.replace(/\r?\n/g, '\n');
            pasteText = pasteText.replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;")
            pasteText = pasteText.replace('　', ' ');
            var startkey = 'http';
            var stopkey1 = ' ';
            var stopkey2 = '\n';
            var startloc = 0;
            var endloc = 0;
            var startcount = 0;
            var urlarray = [];
            // 通常のfor文で行う
            for (var i = 0; i < pasteText.length; i++) {
                if (pasteText.slice(i, i + startkey.length) === startkey) {
                    startloc = i;
                    /*startcount = startcount + 1;*/
                    /*endloc = i + 4;*/
                    var url_flag = false
                    for (var k = startloc; k < pasteText.length; k++) {
                        if (pasteText.slice(k, k + stopkey1.length) === stopkey1) {
                            endloc = k;
                            i = k + stopkey1.length;
                            url_flag = true;
                            break;
                        }
                        else if (pasteText.slice(k, k + stopkey2.length) === stopkey2) {
                            endloc = k;
                            i = k + stopkey1.length;
                            url_flag = true;
                            break;
                        }
                        else {

                        }
                    }
                    if (url_flag === true) {

                        urlarray.push(pasteText.slice(startloc, endloc));


                    }
                }
            }
            var innerText = document.getElementById('textBox').innerHTML;
            {
                //element = element.replace('<spert3>', '&');
                urlarray.forEach(function (element) {
                    if (~innerText.indexOf('<a href="' + element + '">' + element + '</a>')) {

                    }
                    else {
                        /*alert(element);*/
                        innerText = innerText.replace(element, '<a href="' + element + '">' + element + '</a>');
                        document.getElementById('textBox').innerHTML = innerText;

                    }
                });
            }

            //ハイパーリンクの自動付与：サーバー
            //var elms = document.getElementById('textBox').getElementsByTagName('div');
            var pasteText = document.getElementById('textBox').innerText;
            pasteText = pasteText.replace(/\r?\n/g, '\n');

            pasteText = pasteText.replace('　', ' ');
            var startkey = '\\\\';
            var stopkey1 = ' ';
            var stopkey2 = '\n';
            var startloc = 0;
            var endloc = 0;
            var urlarray = [];
            // 通常のfor文で行う
            for (var i = 0; i < pasteText.length; i++) {
                if (pasteText.slice(i, i + startkey.length) === startkey) {
                    startloc = i;
                    endloc = i + 4;
                    var url_flag = false
                    for (var k = startloc; k < pasteText.length; k++) {
                        if (pasteText.slice(k, k + stopkey1.length) === stopkey1) {
                            endloc = k;
                            i = k + stopkey1.length;
                            url_flag = true;
                            break;
                        }
                        else if (pasteText.slice(k, k + stopkey2.length) === stopkey2) {
                            endloc = k;
                            i = k + stopkey1.length;
                            url_flag = true;
                            break;
                        }
                        else {

                        }
                    }
                    if (url_flag === true) {
                        urlarray.push(pasteText.slice(startloc, endloc));


                    }
                }
            }
            var innerText = document.getElementById('textBox').innerHTML;
            {
                urlarray.forEach(function (element) {
                    if (~innerText.indexOf('<a href="' + 'file:///' + element + '">' + 'file:///' + element + '</a>')) {

                    }
                    else {
                        innerText = innerText.replace(element, '<a href="' + 'file:///' + element + '">' + 'file:///' + element + '</a>');
                        document.getElementById('textBox').innerHTML = innerText;

                    }
                });
            }
            //ハイパーリンクの自動付与：ローカルリンク
            pasteText = document.getElementById('textBox').innerText;
            var startkey = 'C:\\';
            var stopkey1 = ' ';
            var stopkey2 = '\n';
            var startloc = 0;
            var endloc = 0;
            var urlarray2 = [];

            // 通常のfor文で行う
            for (var i = 0; i < pasteText.length; i++) {
                if (/[a-zA-Z]:\\/.test(pasteText.slice(i, i + 3)) === true) {
                    startloc = i;
                    endloc = i + 4;
                    var url_flag = false
                    for (var k = startloc; k < pasteText.length; k++) {
                        if (pasteText.slice(k, k + stopkey1.length) === stopkey1) {
                            endloc = k;
                            i = k + stopkey1.length;
                            url_flag = true;
                            break;
                        }
                        else if (pasteText.slice(k, k + stopkey2.length) === stopkey2) {
                            endloc = k;
                            i = k + stopkey1.length;
                            url_flag = true;
                            break;
                        }
                        else {

                        }
                    }
                    if (url_flag === true) {
                        urlarray2.push(pasteText.slice(startloc, endloc));
                    }
                }
            }
            var innerText = document.getElementById('textBox').innerHTML;
            {
                urlarray2.forEach(function (element) {
                    if (~innerText.indexOf('<a href="' + 'file:///' + element + '">' + 'file:///' + element + '</a>')) {

                    }
                    else {
                        innerText = innerText.replace(element, '<a href="' + 'file:///' + element + '">' + 'file:///' + element + '</a>');
                        document.getElementById('textBox').innerHTML = innerText;
                    }
                });
            }


        }, 0);

    }, false);

    function myHandler2(e) {
        if (e.target.tagName.toLowerCase() === 'a' && event.target.id == "") {
            //httpで始まる
            if (~event.target.innerHTML.indexOf('http')) {
                window.open(event.target.href, '_blank');
                //それ以外
            } else {
                alert("ローカルファイルを開きます。");
                window.open(event.target.href, '_blank');
            }
        }
    }

    $(document).ready(myHandler2);
    $("#textBox").on("click", myHandler2);

    function banMenu(e) { e.preventDefault(); }
                //★休止解除予定
                document.addEventListener("contextmenu", banMenu, false);

function myHandler3(e) {
                    if (e.keyCode == 123) {
                        /*alert("F12");*/
                        e.stopPropagation();
                        e.preventDefault();
                    }
                    if (e.ctrlKey && e.keyCode == 85) {
                        /*alert("CTRL+U");*/
                        e.stopPropagation();
                        e.preventDefault();
                    }
                    if (e.ctrlKey && e.shiftKey && e.keyCode == 73) {
                        /*alert("CTRL+Shift+I");*/
                        e.stopPropagation();
                        e.preventDefault();
                    }
                }
                document.addEventListener("keydown", myHandler3, false);

        </script>
    </body>
</html>

}
@if (@IndexModel.screenmode == "exdoc2")
{
    <!doctype html>
    <html>
    <head>
        <link rel="apple-touch-icon" sizes="57x57" href="./apple-icon-57x57.png">
        <link rel="apple-touch-icon" sizes="60x60" href="./apple-icon-60x60.png">
        <link rel="apple-touch-icon" sizes="72x72" href="./apple-icon-72x72.png">
        <link rel="apple-touch-icon" sizes="76x76" href="./apple-icon-76x76.png">
        <link rel="apple-touch-icon" sizes="114x114" href="./apple-icon-114x114.png">
        <link rel="apple-touch-icon" sizes="120x120" href="./apple-icon-120x120.png">
        <link rel="apple-touch-icon" sizes="144x144" href="./apple-icon-144x144.png">
        <link rel="apple-touch-icon" sizes="152x152" href="./apple-icon-152x152.png">
        <link rel="apple-touch-icon" sizes="180x180" href="./apple-icon-180x180.png">
        <link rel="icon" type="image/png" sizes="192x192" href="./android-icon-192x192.png">
        <link rel="icon" type="image/png" sizes="32x32" href="./favicon-32x32.png">
        <link rel="icon" type="image/png" sizes="96x96" href="./favicon-96x96.png">
        <link rel="icon" type="image/png" sizes="16x16" href="./favicon-16x16.png">
        <link rel="manifest" href="./manifest.json">
        <meta name="msapplication-TileColor" content="#ffffff">
        <meta name="msapplication-TileImage" content="./ms-icon-144x144.png">
        <meta name="theme-color" content="#ffffff">
        <title>Life NOTE</title>
        @*<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous" />*@
        <style type="text/css">
            .intLink {
                cursor: pointer;
            }

            img.intLink {
                border: 0;
            }

            #toolBar1 select {
                font-size: 10px;
            }

            #textBox {
                width: 540px;
                height: 300px;
                border: 1px #000000 solid;
                padding: 12px;
                overflow: scroll;
                background: #ffffff;
                position: relative;
            }

                #textBox #sourceText {
                    padding: 0;
                    margin: 0;
                    min-width: 498px;
                    min-height: 200px;
                }

            #editMode label {
                cursor: pointer;
            }

            body {
                background-image: url(bg_pattern_1.png); /* 背景画像指定 */
            }
            .backimage {
                background: @IndexModel.TabColours[@IndexModel.selecttab - 1];
                background-image: url(tab1.png); /* 背景画像指定 */
                border: 1px solid #999;
                height: 100%;
            }

        </style>
    </head>

    <body onload="initDoc();">
        <form name="compForm" method="post" onsubmit="if(validateMode()){this.myDoc.value=oDoc.innerHTML;return true;}return false;">
            @*<div class="backcolour" style="margin-top: 15px;">*@
            <div class="backimage" style="margin-top: 15px;">
                <input type="text" name="title" size="90" id="title" value="@IndexModel.title" style="width: 98%; margin-left: 15px; margin-top: 15px; margin-right:30px"><br>
                <input type="text" name="msg" size="90" disabled="disabled" id="msg" style="width: 98%; margin-left: 15px; margin-top: 15px; margin-right:30px"><br>
                <input type="hidden" name="myDoc">
                <div class="row">
                    <div id="toolBar1" style="margin-left: 30px">
                        <select class="selectpicker pull-right" onchange="formatDoc('formatblock',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                            <option selected>フォーマット</option>
                            <option value="h1">タイトル 1 &lt;h1&gt;</option>
                            <option value="h2">タイトル 2 &lt;h2&gt;</option>
                            <option value="h3">タイトル 3 &lt;h3&gt;</option>
                            <option value="h4">タイトル 4 &lt;h4&gt;</option>
                            <option value="h5">タイトル 5 &lt;h5&gt;</option>
                            <option value="h6">サブタイトル &lt;h6&gt;</option>
                            <option value="p">パラグラフ &lt;p&gt;</option>
                            <option value="pre">プリフォーマット &lt;pre&gt;</option>
                        </select>
                        <select class="selectpicker pull-right" onchange="formatDoc('fontname',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                            <option class="heading" selected>フォント</option>
                            <option>Arial</option>
                            <option>Arial Black</option>
                            <option>Courier New</option>
                            <option>Times New Roman</option>
                            <option>ＭＳ ゴシック</option>
                            <option>ＭＳ Ｐゴシック</option>
                            <option>ＭＳ 明朝</option>
                            <option>ＭＳ Ｐ明朝</option>
                            <option>Impact</option>
                        </select>
                        <select class="selectpicker pull-right" onchange="formatDoc('fontsize',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                            <option class="heading" selected>サイズ</option>
                            <option value="1">極小</option>
                            <option value="2">小</option>
                            <option value="3">標準</option>
                            <option value="4">中大</option>
                            <option value="5">大</option>
                            <option value="6">大大</option>
                            <option value="7">最大</option>
                        </select>
                        <select class="selectpicker pull-right" onchange="formatDoc('forecolor',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                            <option class="heading" selected>色</option>
                            <option value="red">赤</option>
                            <option value="blue">青</option>
                            <option value="green">緑</option>
                            <option value="black">黒</option>
                        </select>
                        <select class="selectpicker pull-right" onchange="formatDoc('backcolor',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                            <option class="heading" selected>背景</option>
                            <option value="red">赤</option>
                            <option value="green">緑</option>
                            <option value="black">黒</option>
                        </select>
                        <img class="intLink" style="width: 40px; height: 40px; margin-left: 30px" title="縮小" onclick="Shrink()" src="shrinkt.png" />

                    </div>
                    <div id="loader">
                        <div class="sk-chase">
                            <div class="sk-chase-dot"></div>
                            <div class="sk-chase-dot"></div>
                            <div class="sk-chase-dot"></div>
                            <div class="sk-chase-dot"></div>
                            <div class="sk-chase-dot"></div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="itemtitle col-md-12">
                        <div id="toolBar2" style="margin-left: 15px">
                            <img class="intLink" style="width :40px; height :40px" title="印刷" onclick="printDoc();" src="Print.png">
                            <img class="intLink" style="width :40px; height :40px" title="戻る" onclick="formatDoc('undo');" src="Undo.png" />
                            <img class="intLink" style="width :40px; height :40px" title="進む" onclick="formatDoc('redo');" src="Redo.png" />
                            <img class="intLink" style="width :40px; height :40px" title="フォーマット削除" onclick="formatDoc('removeFormat')" src="Remove formatting.png">
                            <img class="intLink" style="width :40px; height :40px" title="太字" onclick="formatDoc('bold');" src="Bold.png" />
                            <img class="intLink" style="width :40px; height :40px" title="イタリック" onclick="formatDoc('italic');" src="Italic.png" />
                            <img class="intLink" style="width :40px; height :40px" title="下線" onclick="formatDoc('underline');" src="Underline.png" />
                            <img class="intLink" style="width :40px; height :40px" title="左揃え" onclick="formatDoc('justifyleft');" src="Left align.png" />
                            <img class="intLink" style="width :40px; height :40px" title="中央揃え" onclick="formatDoc('justifycenter');" src="Center align.png" />
                            <img class="intLink" style="width :40px; height :40px" title="右揃え" onclick="formatDoc('justifyright');" src="Right align.png" />
                            <img class="intLink" style="width :40px; height :40px" title="ナンバリング" onclick="formatDoc('insertorderedlist');" src="Numbered list.png" />
                            <img class="intLink" style="width :40px; height :40px" title="箇条書" onclick="formatDoc('insertunorderedlist');" src="Dotted list.png" />
                            <img class="intLink" style="width :40px; height :40px" title="インデント削除" onclick="formatDoc('outdent');" src="Delete indentation.png" />
                            <img class="intLink" style="width :40px; height :40px" title="インデント追加" onclick="formatDoc('indent');" src="Add indentation.png" />
                            <img class="intLink" style="width :40px; height :40px" title="ハイパーリンク" onclick="var sLnk=prompt('Write the URL here','http:\/\/');if(sLnk&&sLnk!=''&&sLnk!='http://'){formatDoc('createlink',sLnk)}" src="Hyperlink.png" />
                            <img class="intLink" style="width :40px; height :40px" title="カット" onclick="formatDoc('cut');" src="Cut.png" />
                        </div>
                        @*</div>*@
                    </div>

                    <div id="textBox" contenteditable="true" style="width: 97%; margin-left: 30px; margin-right: 30px"><p>@Html.Raw(IndexModel.bodyelement2)</p></div>
                    <p id="editMode"><input type="hidden" name="switchMode" id="switchBox" onchange="setDocMode(this.checked);" /></p>
                    <input type="hidden" asp-for="Name" value="nd" />
                </div>
            </div>
        </form>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.15.0/umd/popper.min.js"></script>

        <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
        <script type="text/javascript">
    var oDoc, sDefTxt;
    var rtime;
    var timeout = false;
    var delta = 2000;
    const loader = document.getElementById('loader');
    loader.style = "display:none;";

    var chkstr = document.getElementById("textBox").innerHTML
    var chktitle = document.getElementById("title").value
    //自動保存本文
    const ev = function () {
        var chkstr2 = document.getElementById("textBox").innerHTML
        var chktitle2 = document.getElementById("title").value
        if (chkstr != chkstr2) {
            //自動保存処理
            textbody = document.getElementById('textBox').innerText;
            htmlbody = document.getElementById('textBox').innerHTML;
            document.getElementById('loader').style = "display: normal;";
            /*alert("start");*/
            const form = document.forms[0];
            FD = new FormData(form);
            // データを FormData オブジェクトに投入します
            /*FD.append("indx", 'pass');*/
            FD.append("evnt", "save");
            FD.append("textbody", textbody);
            FD.append("htmlbody", htmlbody);
            var main = document.getElementById('textBox');
            var sctop = main.scrollTop;
            FD.append("scrollTop", sctop);
            // aysnchronous fetch ajax
            fetch(form.action,
                {
                    method: form.method,
                    body: FD
                }
            )
                // if any exceptions - log them
                .catch(err => alert("network error: " + err))
                .then(response => {

                    // read json from the response stream
                    // and display the data
                    response.json().then(data => {

                        rtime = new Date();
                        if (timeout === false) {
                            timeout = true;
                            setTimeout(resizeend, delta);
                        }
                    });
                })

        }
        if (chktitle != chktitle2) {
            //自動保存処理
            var title = document.getElementById("title").innerText;

            const form = document.forms[0];
            document.getElementById('loader').style = "display: normal;";
            FD = new FormData(form);
            // データを FormData オブジェクトに投入します

            FD.append("evnt", "tytlechanged");
            /*FD.append("title", title);*/
            fetch(form.action,
                {
                    method: form.method,
                    body: FD
                }
            )
                // if any exceptions - log them
                .catch(err => alert("network error: " + err))
                .then(response => {

                    // read json from the response stream
                    // and display the data
                    response.json().then(data => {

                        rtime = new Date();
                        if (timeout === false) {
                            timeout = true;
                            setTimeout(resizeend, delta);
                        }
                    });
                })
        }
        chkstr = document.getElementById("textBox").innerHTML
        chktitle = document.getElementById("title").value
    };

    setInterval(ev, 1000);

            function stopWinClose(e) {
                e.preventDefault();
                e.returnValue = '';

            }

            function resizeend() {
                if (new Date() - rtime < delta) {
                    setTimeout(resizeend, delta);
                    window.addEventListener("beforeunload", stopWinClose, true);

                } else {
                    timeout = false;
                    /*alert("HIT");*/

                    window.removeEventListener("beforeunload", stopWinClose, true);

                    document.getElementById('loader').style = "display: none;";
                }
            }

    function initDoc() {
        oDoc = document.getElementById("textBox");
        oDoc.scrollTop = "@IndexModel.scrollloc";
        sDefTxt = oDoc.innerHTML;
        if (document.compForm.switchMode.checked) { setDocMode(true); }
    }

    function formatDoc(sCmd, sValue) {
        if (validateMode()) { document.execCommand(sCmd, false, sValue); oDoc.focus(); }
    }

    function validateMode() {
        if (!document.compForm.switchMode.checked) { return true; }
        alert("Uncheck \"Show HTML\".");
        oDoc.focus();
        return false;
    }

    function setDocMode(bToSource) {
        var oContent;
        if (bToSource) {
            oContent = document.createTextNode(oDoc.innerHTML);
            oDoc.innerHTML = "";
            var oPre = document.createElement("pre");
            oDoc.contentEditable = false;
            oPre.id = "sourceText";
            oPre.contentEditable = true;
            oPre.appendChild(oContent);
            oDoc.appendChild(oPre);
            document.execCommand("defaultParagraphSeparator", false, "div");
        } else {
            if (document.all) {
                oDoc.innerHTML = oDoc.innerText;
            } else {
                oContent = document.createRange();
                oContent.selectNodeContents(oDoc.firstChild);
                oDoc.innerHTML = oContent.toString();
            }
            oDoc.contentEditable = true;
        }
        oDoc.focus();
    }

    function printDoc() {
        if (!validateMode()) { return; }
        var oPrntWin = window.open("", "_blank", "width=450,height=470,left=400,top=100,menubar=yes,toolbar=no,location=no,scrollbars=yes");
        oPrntWin.document.open();
        oPrntWin.document.write("<!doctype html><html><head><title>Print<\/title><\/head><body onload=\"print();\">" + oDoc.innerHTML + "<\/body><\/html>");
        oPrntWin.document.close();
    }
    function chancelNew() {

        const form = document.forms[0];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("evnt", "newchancel");

        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    //textbox.innerHTML = data
                    document.location.reload();
                });
            })
    }
    function partialNew(title, textbody, htmlbody) {

        const form = document.forms[0];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("title", title);
        FD.append("textbody", textbody);
        FD.append("htmlbody", htmlbody);
        FD.append("indx", "pass");
        FD.append("evnt", "partialnew");

        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    //textbox.innerHTML = data
                    document.location.reload();
                });
            })
    }
    function Shrink() {

        const form = document.forms[0];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("evnt", "newchancel2");

        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    //textbox.innerHTML = data
                    document.location.reload();
                });
            })
    }
    // only one form - select it!
    const form = document.forms[0];
    // attach onsubmit
    // attach onsubmit
    var textstr2 = document.getElementById('textBox');
    textstr2.addEventListener("paste", async function (event) {
        setTimeout(function () {


            //ハイパーリンクの自動付与：ホームページ
            //var elms = document.getElementById('textBox').getElementsByTagName('div');
            var pasteText = document.getElementById('textBox').innerText;
            pasteText = pasteText.replace(/\r?\n/g, '\n');
            pasteText = pasteText.replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;")
            pasteText = pasteText.replace('　', ' ');
            var startkey = 'http';
            var stopkey1 = ' ';
            var stopkey2 = '\n';
            var startloc = 0;
            var endloc = 0;
            var startcount = 0;
            var urlarray = [];
            // 通常のfor文で行う
            for (var i = 0; i < pasteText.length; i++) {
                if (pasteText.slice(i, i + startkey.length) === startkey) {
                    startloc = i;
                    /*startcount = startcount + 1;*/
                    /*endloc = i + 4;*/
                    var url_flag = false
                    for (var k = startloc; k < pasteText.length; k++) {
                        if (pasteText.slice(k, k + stopkey1.length) === stopkey1) {
                            endloc = k;
                            i = k + stopkey1.length;
                            url_flag = true;
                            break;
                        }
                        else if (pasteText.slice(k, k + stopkey2.length) === stopkey2) {
                            endloc = k;
                            i = k + stopkey1.length;
                            url_flag = true;
                            break;
                        }
                        else {

                        }
                    }
                    if (url_flag === true) {

                        urlarray.push(pasteText.slice(startloc, endloc));


                    }
                }
            }
            var innerText = document.getElementById('textBox').innerHTML;
            {
                //element = element.replace('<spert3>', '&');
                urlarray.forEach(function (element) {
                    if (~innerText.indexOf('<a href="' + element + '">' + element + '</a>')) {

                    }
                    else {
                        /*alert(element);*/
                        innerText = innerText.replace(element, '<a href="' + element + '">' + element + '</a>');
                        document.getElementById('textBox').innerHTML = innerText;

                    }
                });
            }

            //ハイパーリンクの自動付与：サーバー
            //var elms = document.getElementById('textBox').getElementsByTagName('div');
            var pasteText = document.getElementById('textBox').innerText;
            pasteText = pasteText.replace(/\r?\n/g, '\n');

            pasteText = pasteText.replace('　', ' ');
            var startkey = '\\\\';
            var stopkey1 = ' ';
            var stopkey2 = '\n';
            var startloc = 0;
            var endloc = 0;
            var urlarray = [];
            // 通常のfor文で行う
            for (var i = 0; i < pasteText.length; i++) {
                if (pasteText.slice(i, i + startkey.length) === startkey) {
                    startloc = i;
                    endloc = i + 4;
                    var url_flag = false
                    for (var k = startloc; k < pasteText.length; k++) {
                        if (pasteText.slice(k, k + stopkey1.length) === stopkey1) {
                            endloc = k;
                            i = k + stopkey1.length;
                            url_flag = true;
                            break;
                        }
                        else if (pasteText.slice(k, k + stopkey2.length) === stopkey2) {
                            endloc = k;
                            i = k + stopkey1.length;
                            url_flag = true;
                            break;
                        }
                        else {

                        }
                    }
                    if (url_flag === true) {
                        urlarray.push(pasteText.slice(startloc, endloc));


                    }
                }
            }
            var innerText = document.getElementById('textBox').innerHTML;
            {
                urlarray.forEach(function (element) {
                    if (~innerText.indexOf('<a href="' + 'file:///' + element + '">' + 'file:///' + element + '</a>')) {

                    }
                    else {
                        innerText = innerText.replace(element, '<a href="' + 'file:///' + element + '">' + 'file:///' + element + '</a>');
                        document.getElementById('textBox').innerHTML = innerText;

                    }
                });
            }
            //ハイパーリンクの自動付与：ローカルリンク
            pasteText = document.getElementById('textBox').innerText;
            var startkey = 'C:\\';
            var stopkey1 = ' ';
            var stopkey2 = '\n';
            var startloc = 0;
            var endloc = 0;
            var urlarray2 = [];

            // 通常のfor文で行う
            for (var i = 0; i < pasteText.length; i++) {
                if (/[a-zA-Z]:\\/.test(pasteText.slice(i, i + 3)) === true) {
                    startloc = i;
                    endloc = i + 4;
                    var url_flag = false
                    for (var k = startloc; k < pasteText.length; k++) {
                        if (pasteText.slice(k, k + stopkey1.length) === stopkey1) {
                            endloc = k;
                            i = k + stopkey1.length;
                            url_flag = true;
                            break;
                        }
                        else if (pasteText.slice(k, k + stopkey2.length) === stopkey2) {
                            endloc = k;
                            i = k + stopkey1.length;
                            url_flag = true;
                            break;
                        }
                        else {

                        }
                    }
                    if (url_flag === true) {
                        urlarray2.push(pasteText.slice(startloc, endloc));
                    }
                }
            }
            var innerText = document.getElementById('textBox').innerHTML;
            {
                urlarray2.forEach(function (element) {
                    if (~innerText.indexOf('<a href="' + 'file:///' + element + '">' + 'file:///' + element + '</a>')) {

                    }
                    else {
                        innerText = innerText.replace(element, '<a href="' + 'file:///' + element + '">' + 'file:///' + element + '</a>');
                        document.getElementById('textBox').innerHTML = innerText;
                    }
                });
            }


        }, 0);

    }, false);

    function myHandler2(e) {
        if (e.target.tagName.toLowerCase() === 'a' && event.target.id == "") {
            //httpで始まる
            if (~event.target.innerHTML.indexOf('http')) {
                window.open(event.target.href, '_blank');
                //それ以外
            } else {
                alert("ローカルファイルを開きます。");
                window.open(event.target.href, '_blank');
            }
        }
    }

    $(document).ready(myHandler2);
    $("#textBox").on("click", myHandler2);

            function banMenu(e) { e.preventDefault(); }
            //★休止解除予定
            document.addEventListener("contextmenu", banMenu, false);

            function myHandler3(e) {
                if (e.keyCode == 123) {
                    /*alert("F12");*/
                    e.stopPropagation();
                    e.preventDefault();
                }
                if (e.ctrlKey && e.keyCode == 85) {
                    /*alert("CTRL+U");*/
                    e.stopPropagation();
                    e.preventDefault();
                }
                if (e.ctrlKey && e.shiftKey && e.keyCode == 73) {
                    /*alert("CTRL+Shift+I");*/
                    e.stopPropagation();
                    e.preventDefault();
                }
            }
            document.addEventListener("keydown", myHandler3, false);
        </script>
    </body>
</html>

}
@if (@IndexModel.screenmode == "normal")
{
    
<!DOCTYPE html>
    <html lang="ja">
    <head>
        <link rel="apple-touch-icon" sizes="57x57" href="./apple-icon-57x57.png">
        <link rel="apple-touch-icon" sizes="60x60" href="./apple-icon-60x60.png">
        <link rel="apple-touch-icon" sizes="72x72" href="./apple-icon-72x72.png">
        <link rel="apple-touch-icon" sizes="76x76" href="./apple-icon-76x76.png">
        <link rel="apple-touch-icon" sizes="114x114" href="./apple-icon-114x114.png">
        <link rel="apple-touch-icon" sizes="120x120" href="./apple-icon-120x120.png">
        <link rel="apple-touch-icon" sizes="144x144" href="./apple-icon-144x144.png">
        <link rel="apple-touch-icon" sizes="152x152" href="./apple-icon-152x152.png">
        <link rel="apple-touch-icon" sizes="180x180" href="./apple-icon-180x180.png">
        <link rel="icon" type="image/png" sizes="192x192" href="./android-icon-192x192.png">
        <link rel="icon" type="image/png" sizes="32x32" href="./favicon-32x32.png">
        <link rel="icon" type="image/png" sizes="96x96" href="./favicon-96x96.png">
        <link rel="icon" type="image/png" sizes="16x16" href="./favicon-16x16.png">
        <link rel="shortcut icon" href="./favicon-96x96.png">
        <link rel="manifest" href="./manifest.json">
        
        @*<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous" />*@
        <meta name="msapplication-TileColor" content="#ffffff">
        <meta name="msapplication-TileImage" content="./ms-icon-144x144.png">
        <meta name="theme-color" content="#ffffff">
        <meta charset="UTF-8">
        <title>Life NOTE</title>
        <body>

            <form method="post" name="firstbuttons" id="firstform">
                <div class="row" style="height:auto;">
                    <div class="itemtitle col-md-6">
                        <div class="input-group">
                            <input class="form-control border-end-0 border" type="search" value="" id="search">
                            <span class="input-group-append">
                                <button id="searchbutton" class="btn btn-secondary" type="button" onclick="Search()">
                                    <i class="fa fa-search"></i>
                                </button>
                            </span>
                        </div>
                      
                        @*<div class="form-group">
                            <input type="text" class="form-ctextontrol" id="search" placeholder="キーワード" style="min-width: 100%!important;">
                        </div>*@
                    </div>
                    <div class="itemtitle col-md-6">
                        <div class="radio d-inline-block">
                            <label>
                                <input type="radio" name="field" id="optionsRadios1" value="tytle">
                                タイトル
                            </label>
                        </div>
                        <div class="radio d-inline-block">
                            <label>
                                <input type="radio" name="field" id="optionsRadios1" value="body" checked>
                                本文
                            </label>
                        </div>
                        @*<div class="checkbox disabled d-inline-block">
                            <label>
                                <input type="checkbox" disabled name="grobal" id="global" value="1">
                                グローバル
                            </label>
                        </div>*@
                        @*<input type="button" value="検索" id="searchbutton" class="btn btn-primary" onclick="Search()">*@


                        <div class="dropdown d-inline-block">
                            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">タブ</button>
                            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                <a class="dropdown-item" data-toggle="modal" data-target="#exampleModal1" href="#" id="addtab">タブ追加</a>
                                <a class="dropdown-item" data-toggle="modal" data-target="#exampleModal9" href="#" id="changetabnmn">タブ名変更</a>
                                <a class="dropdown-item" data-toggle="modal" data-target="#exampleModal2" href="#" id="inactivetab">タブ非表示</a>
                                <a class="dropdown-item" data-toggle="modal" data-target="#exampleModal6" href="#" id="showtab">タブ表示</a>
                                <a class="dropdown-item" data-toggle="modal" data-target="#exampleModal7" href="#" id="deletetab">タブ削除</a>
                                @*<a class="dropdown-item" href="#" id="setting" onclick="Setting(this)" >設定</a>*@
                            </div>
                        </div>
                            @Html.Partial("_TabMenu", new LifeNOTE_BIZ.Pages.Shared._TabMenuModel())
                    </div>
                </div>
                <div class="row" style="height:auto">
                    <div class="itemtitle col-md-6">
                        <input class="form-control" type="text" id="message" disabled="disabled" style="min-width: 100% !important; margin: 7px; margin-left: -1px;" value="@IndexModel.errormessage">
                    </div>
                    @*<div class="itemtitle col-md-6">*@
                    <input class="form-control" name="updatedate" id="updatedate" type="text" value="@IndexModel.updatedate" disabled="disabled" style="width: 178px !important; margin: 7px;" />
                    <input class="form-control" name="author" id="author" type="text" value="@IndexModel.author" disabled="disabled" style="width: auto !important; margin: 7px;" />
                    @*</div>*@
                </div>
            </form>
            @{

                var html1 = "<div class=\"cp_tab\">";
                for (int i = 1; i <= IndexModel.datasize; i++)
                {
                    //差異部分
                    if (i == 1)
                    {
                        html1 = html1 + "<input type=\"radio\" name=\"cp_tab\" id=\"tab3_" + i + "\" aria-controls=\"" + IndexModel.Numbers[i - 1] + "\" checked onclick=\"TabClick(this.id)\">" +
                        "                <label for=\"tab3_" + i + "\">" + IndexModel.titlenamelist[i - 1] + "</label>";
                    }
                    else
                    {
                        html1 = html1 + "<input type=\"radio\" name=\"cp_tab\" id=\"tab3_" + i + "\" aria-controls=\"" + IndexModel.Numbers[i - 1] + "\"onclick=\"TabClick(this.id)\">" +
                        "                <label for=\"tab3_" + i + "\">" + IndexModel.titlenamelist[i - 1] + "</label>";
                    }

                }
                @Html.Raw(html1);
            }
            @{
                var html_head = "<div class=\"cp_tabpanels\">";
                for (int i = 1; i <= IndexModel.selecttab; i++)
                {
                    if (i == IndexModel.selecttab)
                    {
                        html_head = html_head + "<div id=\"" + IndexModel.Numbers[i - 1] + "\" class=\"cp_tabpanel\">";
                    }
                    else
                    {
                        html_head = html_head + "<div id=\"" + IndexModel.Numbers[i - 1] + "\" class=\"cp_tabpanel\">" +
                        "                    </div>";
                    }

                }
                @Html.Raw(html_head);
            }
            <form method="post" name="tytlebuttons" id="secondform">

                <div class="row">
                    <div class="itemtitle col-md-6">
                        <div class="dropdown d-inline-block">
                            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                ファイル
                            </button>
                            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                <a class="dropdown-item" href="#" id="changetitle" data-toggle="modal" data-target="#exampleModal4" onclick="showGenre1()">タイトル編集・変更 </a>
                                <a class="dropdown-item" href="#" id="changetitle" data-toggle="modal" data-target="#exampleModal8" onclick="showGenre2()">新規 </a>
                                <a class="dropdown-item" href="#" id="savedoc" onclick="showGenre3(textBox.innerText,textBox.innerHTML)">保存</a>
                                <a class="dropdown-item" href="#" id="delete" data-toggle="modal" data-target="#exampleModal5" onclick="showGenre4()">削除</a>
                            </div>
                        </div>
                        <button id="up" class="btn btn-secondary" type="button" onclick="Up()">
                            <img src="upimgt.png" height="20" width="10" />
                        </button>
                        <button id="down" class="btn btn-secondary" type="button" onclick="Down()">
                            <img src="downimgt.png" height="20" width="10" />
                        </button>
                        <button id="leftmove" class="btn btn-secondary" type="button" onclick="Left()">
                            <img src="leftimgt.png" height="20" width="10" />
                        </button>
                        <button id="rightmove" class="btn btn-secondary" type="button" onclick="Right()">
                            <img src="rightimgt.png" height="20" width="10" />
                        </button>
                        <input type="button" value="ｱｯﾌﾟﾛｰﾄﾞ" id="uploadd" class="btn btn-secondary" onclick="TempSetting()">
                        <input type="hidden" asp-for="Name" value="btn" />
                        <select class="selectpicker " name="attach" id="upload" style="width: 300px; height: 35px; font-size: 17px;" onclick="Attach(this[this.selectedIndex].value)">
                            <option value="test">no attach files</option>
                        </select>
                        <input type="button" value="コピー" class="btn btn-secondary" id="copy" onclick="Copy()">
                        <img class="intLink" style="width: 40px; height: 40px; margin-left: 10px" title="拡大" id="exp" onclick="Expand()" src="expandt.png" />
                    </div>
                    <div class="itemtitle col-md-6">
                    <div id="toolBar1" style="margin-left:15px">
                        <select class="selectpicker pull-right" onchange="formatDoc('formatblock',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                            <option selected>フォーマット</option>
                            <option value="h1">タイトル 1 &lt;h1&gt;</option>
                            <option value="h2">タイトル 2 &lt;h2&gt;</option>
                            <option value="h3">タイトル 3 &lt;h3&gt;</option>
                            <option value="h4">タイトル 4 &lt;h4&gt;</option>
                            <option value="h5">タイトル 5 &lt;h5&gt;</option>
                            <option value="h6">サブタイトル &lt;h6&gt;</option>
                            <option value="p">パラグラフ &lt;p&gt;</option>
                            <option value="pre">プリフォーマット &lt;pre&gt;</option>
                        </select>
                        <select class="selectpicker pull-right" onchange="formatDoc('fontname',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                            <option class="heading" selected>フォント</option>
                            <option>Arial</option>
                            <option>Arial Black</option>
                            <option>Courier New</option>
                            <option>Times New Roman</option>
                            <option>ＭＳ ゴシック</option>
                            <option>ＭＳ Ｐゴシック</option>
                            <option>ＭＳ 明朝</option>
                            <option>ＭＳ Ｐ明朝</option>
                            <option>Impact</option>
                        </select>
                        <select class="selectpicker pull-right" onchange="formatDoc('fontsize',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                            <option class="heading" selected>サイズ</option>
                            <option value="1">極小</option>
                            <option value="2">小</option>
                            <option value="3">標準</option>
                            <option value="4">中大</option>
                            <option value="5">大</option>
                            <option value="6">大大</option>
                            <option value="7">最大</option>
                        </select>
                        <select class="selectpicker pull-right" onchange="formatDoc('forecolor',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                            <option class="heading" selected>色</option>
                            <option value="red">赤</option>
                            <option value="blue">青</option>
                            <option value="green">緑</option>
                            <option value="black">黒</option>
                        </select>
                        <select class="selectpicker pull-right" onchange="formatDoc('backcolor',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                            <option class="heading" selected>背景</option>
                            <option value="red">赤</option>
                            <option value="green">緑</option>
                            <option value="black">黒</option>
                        </select>
                    </div>
                    <div id="loader">
                        <div class="sk-chase">
                            <div class="sk-chase-dot"></div>
                            <div class="sk-chase-dot"></div>
                            <div class="sk-chase-dot"></div>
                            <div class="sk-chase-dot"></div>
                            <div class="sk-chase-dot"></div>
                        </div>
                    </div>
                    </div>
                    <div class="row">
                        <div class="itemtitle col-md-12">
                            <div id="toolBar2" style="margin-left: 10px">
                                <img class="intLink" style="width :40px; height :40px" title="戻る" onclick="formatDoc('undo');" src="Undo.png" />
                                <img class="intLink" style="width :40px; height :40px" title="進む" onclick="formatDoc('redo');" src="Redo.png" />
                                <img class="intLink" style="width :40px; height :40px" title="フォーマット削除" onclick="formatDoc('removeFormat')" src="Remove formatting.png">
                                <img class="intLink" style="width :40px; height :40px" title="太字" onclick="formatDoc('bold');" src="Bold.png" />
                                <img class="intLink" style="width :40px; height :40px" title="イタリック" onclick="formatDoc('italic');" src="Italic.png" />
                                <img class="intLink" style="width :40px; height :40px" title="下線" onclick="formatDoc('underline');" src="Underline.png" />
                                <img class="intLink" style="width :40px; height :40px" title="左揃え" onclick="formatDoc('justifyleft');" src="Left align.png" />
                                <img class="intLink" style="width :40px; height :40px" title="中央揃え" onclick="formatDoc('justifycenter');" src="Center align.png" />
                                <img class="intLink" style="width :40px; height :40px" title="右揃え" onclick="formatDoc('justifyright');" src="Right align.png" />
                                <img class="intLink" style="width :40px; height :40px" title="ナンバリング" onclick="formatDoc('insertorderedlist');" src="Numbered list.png" />
                                <img class="intLink" style="width :40px; height :40px" title="箇条書" onclick="formatDoc('insertunorderedlist');" src="Dotted list.png" />
                                <img class="intLink" style="width :40px; height :40px" title="インデント削除" onclick="formatDoc('outdent');" src="Delete indentation.png" />
                                <img class="intLink" style="width :40px; height :40px" title="インデント追加" onclick="formatDoc('indent');" src="Add indentation.png" />
                                <img class="intLink" style="width :40px; height :40px" title="ハイパーリンク" onclick="var sLnk=prompt('Write the URL here','http:\/\/');if(sLnk&&sLnk!=''&&sLnk!='http://'){formatDoc('createlink',sLnk)}" src="Hyperlink.png" />
                                <img class="intLink" style="width :40px; height :40px" title="カット" onclick="formatDoc('cut');" src="Cut.png" />
                            </div>
                        </div>
                    </div>
                </div>
            </form>
            <form method="post" name="tytlecolumn" id="thirdform">
                <p class="tab1">
                    <select class="same-width-list" style="@IndexModel.textheight" size="20" id="ddlProducts" name="ddProducts" onchange="GetBody(this[this.selectedIndex].value)">
                        @{
                            await Task.Delay(1000);
                        }
                        @for (int i = 0; i <= IndexModel.Alldoc[IndexModel.selecttab - 1].Count - 1; i++)
                        {
                            <option value="@i">@IndexModel.Alldoc[IndexModel.selecttab - 1][i].Title</option>
                        }
                    </select>
                    <input type="hidden" asp-for="Name" value="tab1" />
                </p>
            </form>

            <body onload="initDoc();">

                <form name="compForm" method="post" onsubmit="if(validateMode()){this.myDoc.value=oDoc.innerHTML;return true;}return false;">
                    <input type="hidden" name="myDoc">

                    <div id="textBox" contenteditable="true" style="@IndexModel.textheight">@Html.Raw(IndexModel.bodyelement)</div>
                    <p id="editMode"><input type="hidden" name="switchMode" id="switchBox" onchange="setDocMode(this.checked);" /></p>
                    @*<p id="editMode"><input type="checkbox" name="switchMode" id="switchBox" onchange="setDocMode(this.checked);" /> <label for="switchBox">Show HTML</label></p>*@
                </form>
            </body>

            @{
                var html_foot = "</div>";
                //for (int i = IndexModel.selecttab + 1; i <= IndexModel.datasize; i++)
                for (int i = 1; i <= IndexModel.datasize; i++)
                {
                    html_foot = html_foot + "<div id=\"" + IndexModel.Numbers[i - 1] + "\" class=\"cp_tabpanel\">" +
                    "                    </div>";

                }
                @Html.Raw(html_foot + "</div></div>");
            }

@*<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.15.0/umd/popper.min.js"></script>*@


<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js" integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k" crossorigin="anonymous"></script>
            <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css'>


            <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
            
            
<script type="text/javascript">
    //add this js script into the web page,
    //you want reload once after first load
    window.onload = function () {
        var tab2 = document.getElementById("@IndexModel.activetabname");
        var tab3 = document.getElementById("@IndexModel.activetabname2");
        //considering there aren't any hashes in the urls already
        if (!window.location.hash) {
            //setting window location
            window.location = window.location + '#loaded';
            //using reload() method to reload web page
            setTimeout(function () { tab3.checked = true; }, 1000);
            window.location.reload();
            setTimeout(function () { tab2.checked = true; }, 500);
            window.location.reload();
        }
        else
        {
            var tab = document.getElementById("@IndexModel.activetabname");
            tab.checked = true;
            var main = document.getElementById('textBox');
            //スクロールの位置を指定
            main.scrollTop = "@IndexModel.scrollloc";

        }
    }
    var oDoc, sDefTxt, locindx;
    //タブが1個の場合はアクティブに
    var tab = document.getElementById("@IndexModel.activetabname");
    tab.draggable = false;
    //初期リストの名前 title
    //タブが1個の場合はアクティブに
    tab.checked = true;
        var titlev = "";
        var rtime;
        var timeout = false;
        var delta = 2000;
        var chkstr = "";
        /*document.location.reload()*/
        const loader = document.getElementById('loader');
        loader.style = "display:none;";
    loader.disabled;
    //var exp = document.getElementById(exp);
    //exp.draggable = true;

    setTimeout(function () { chkstr = document.getElementById("textBox").innerHTML; }, 0);
    //自動保存
    var updtef = true
    const ev = function () {
        var chkstr2 = document.getElementById("textBox").innerHTML
        /*if (updatef != "") {*/
        //alert(chkstr);
        //alert(chkstr2);
        if (chkstr != chkstr2) {
            //自動保存処理
            //alert(chkstr);
            //alert(chkstr2);
            textbody = document.getElementById('textBox').innerText;
            htmlbody = document.getElementById('textBox').innerHTML;
            document.getElementById('loader').style = "display: normal;";
            /*alert("start");*/
            const form = document.forms[3];
            FD = new FormData(form);
            // データを FormData オブジェクトに投入します
            /*FD.append("indx", 'pass');*/
            FD.append("evnt", "save");
            FD.append("textbody", textbody);
            FD.append("htmlbody", htmlbody);
            var main = document.getElementById('textBox');
            var sctop = main.scrollTop;
            FD.append("scrollTop", sctop);
            // aysnchronous fetch ajax
            fetch(form.action,
                {
                    method: form.method,
                    body: FD
                }
            )
                // if any exceptions - log them
                .catch(err => alert("network error: " + err))
                .then(response => {

                    // read json from the response stream
                    // and display the data
                    response.json().then(data => {

                        rtime = new Date();
                        if (timeout === false) {
                            timeout = true;
                            setTimeout(resizeend, delta);
                        }
                    });
                })
                .then((result) => {
                    Example(result);  //取得したJSONデータを関数に渡す
                    //setTimeout(function () { chkstr = document.getElementById("textBox").innerHTML; }, 0);
                })

            /*}*/
            chkstr = document.getElementById("textBox").innerHTML
        }
    };
    setInterval(ev, 1000);

    var select = document.getElementById("ddlProducts");
    //初期リストの位置
    select.options["@IndexModel.locstr"].selected = true;
    //★初期リストの位置の添付ファイル attachfile
    var initattach = @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(IndexModel.attachfile)));

    //var initattach = "test1,test2";

        if (initattach.length > 0) {
            document.getElementById("upload").innerHTML = "";
            initattach.split(',').forEach(function (value) {
                //alert("hit");
                addOption(value);
            })

        }
        else {
            document.getElementById("upload").innerHTML = "";
            addNone();
        }



    function stopWinClose(e) {
        e.preventDefault();
        e.returnValue = '';

    }
    function resizeend() {
        if (new Date() - rtime < delta) {
            setTimeout(resizeend, delta);
            window.addEventListener("beforeunload", stopWinClose, true);

        } else {
            timeout = false;
            /*alert("HIT");*/

            window.removeEventListener("beforeunload", stopWinClose, true);

            document.getElementById('loader').style = "display: none;";
        }
    }
    function myHandler3(e) {
        if (e.keyCode == 123) {
            /*alert("F12");*/
            e.stopPropagation();
            e.preventDefault();
        }
        if (e.ctrlKey && e.keyCode == 85) {
            /*alert("CTRL+U");*/
            e.stopPropagation();
            e.preventDefault();
        }
        if (e.ctrlKey && e.shiftKey && e.keyCode == 73) {
            /*alert("CTRL+Shift+I");*/
            e.stopPropagation();
            e.preventDefault();
        }
    }
    document.addEventListener("keydown", myHandler3, false);
    function initDoc() {

       oDoc = document.getElementById("textBox");
　　　
       const form = document.forms[0];
       FD = new FormData(form);
       // データを FormData オブジェクトに投入します

       FD.append("evnt", "openattach");
       // aysnchronous fetch ajax
       fetch(form.action,
           {
               method: form.method,
               body: FD
           }
       )
           // if any exceptions - log them
           .catch(err => console.log("network error: " + err))
           .then((response) => {
               return response.json()　//ここでBodyからJSONを返す
           })
           .then((result) => {
               Example3(result);  //取得したJSONデータを関数に渡す
           })

       sDefTxt = oDoc.innerHTML;
       if (document.compForm.switchMode.checked) { setDocMode(true); }
    }
    function formatDoc(sCmd, sValue) {
        if (validateMode()) { document.execCommand(sCmd, false, sValue); oDoc.focus(); }
    }
    function validateMode() {
        if (!document.compForm.switchMode.checked) { return true; }
        alert("Uncheck \"Show HTML\".");
        oDoc.focus();
        return false;
    }
    function setDocMode(bToSource) {
        var oContent;
        if (bToSource) {
            oContent = document.createTextNode(oDoc.innerHTML);
            oDoc.innerHTML = "";
            var oPre = document.createElement("pre");
            oDoc.contentEditable = false;
            oPre.id = "sourceText";
            oPre.contentEditable = true;
            oPre.appendChild(oContent);
            oDoc.appendChild(oPre);
            document.execCommand("defaultParagraphSeparator", false, "div");
        } else {
            if (document.all) {
                oDoc.innerHTML = oDoc.innerText;
            } else {
                oContent = document.createRange();
                oContent.selectNodeContents(oDoc.firstChild);
                oDoc.innerHTML = oContent.toString();
            }
            oDoc.contentEditable = true;
        }
        oDoc.focus();
    }
    function printDoc() {
        if (!validateMode()) { return; }
        var oPrntWin = window.open("", "_blank", "width=450,height=470,left=400,top=100,menubar=yes,toolbar=no,location=no,scrollbars=yes");
        oPrntWin.document.open();
        oPrntWin.document.write("<!doctype html><html><head><title>Print<\/title><\/head><body onload=\"print();\">" + oDoc.innerHTML + "<\/body><\/html>");
        oPrntWin.document.close();
    }
    function saveDoc(textbody, htmlbody) {

        const form = document.forms[3];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("textbody", textbody);
        FD.append("htmlbody", htmlbody);
        FD.append("indx", 'pass');
        FD.append("evnt", "save");
        var main = document.getElementById('textBox');
        var sctop = main.scrollTop;
        FD.append("scrollTop", sctop);

        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
        // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => { document.location.reload(); });
            })

    }
    function Newdoc() {
        const form = document.forms[0];
        const titletext = document.getElementById("title2").value;
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("title", titletext);
        /*alert(titletext);*/
        FD.append("textbody", "");
        FD.append("htmlbody", "");
        FD.append("indx", "pass");
        FD.append("evnt", "partialnew");

         /*aysnchronous fetch ajax*/
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    //textbox.innerHTML = data
                    document.location.reload();
                });
            })
    }
    function Up() {
        const form = document.forms[3];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("indx", "pass");
        FD.append("evnt", "up");
            
        fetch(form.action,
            {
                 method: form.method,
                 body: FD
            }
            )
                // if any exceptions - log them
                .catch(err => console.log("network error: " + err))
                .then(response => {

                    // read json from the response stream
                    // and display the data
                    response.json().then(data => {
                        document.location.reload();
                        //textBox.innerHTML = data
                    })
                .then((result) => {
                    setTimeout(function () { chkstr = document.getElementById("textBox").innerHTML; }, 0);
                    });
                })
        }
    function Down() {
        const form = document.forms[3];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("indx", "pass");
        FD.append("evnt", "down");
        
        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
            )
                // if any exceptions - log them
                .catch(err => console.log("network error: " + err))
                .then(response => {

                // read json from the response stream
                // and display the data
            response.json().then(data => {
            //textBox.innerHTML = data
             document.location.reload();
            })
            .then((result) => {
                setTimeout(function () { chkstr = document.getElementById("textBox").innerHTML; }, 0);
                });
            })
    }
    function Left() {
        const form = document.forms[3];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("indx", "pass");
        FD.append("evnt", "left");
        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    //textBox.innerHTML = data
                    document.location.reload();
                })
                    .then((result) => {
                        setTimeout(function () { chkstr = document.getElementById("textBox").innerHTML; }, 0);
                    });
            })

    }
    function Right() {
        const form = document.forms[3];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("indx", "pass");
        FD.append("evnt", "right");


        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    //textBox.innerHTML = data
                    document.location.reload();
                })
                    .then((result) => {
                        setTimeout(function () { chkstr = document.getElementById("textBox").innerHTML; }, 0);
                    });
            })
    }
    function TabClick(id) {
        var tabno = id.split('_');
        const form = document.forms[3];
        FD = new FormData(form);
        FD.append("tabno", tabno[1]);
        FD.append("evnt", "tabclick");
        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    document.location.reload();
                });
            })
    }
    function Search() {
        const textbox = document.getElementById("search");
        const elements = document.getElementsByName("field");
        @*element = document.getElementById('global');*@
        const value = textbox.value;
        @*const check = element.checked;*@

        //alert(value);
        // 選択状態の値を取得
        for (var a = "", i = elements.length; i--;) {
            if (elements[i].checked) {
                var a = elements[i].value;
                break;
            }
        }
        const form = document.forms[0];
        FD = new FormData(form);
        FD.append("keyword", value);
        FD.append("evnt", "search");
        FD.append("field", a);
        @*FD.append("global", check);*@

        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    document.location.reload();
                });
            })


                }
    //右クリックを不能にする
    //var fm1 = document.getElementById('firstform');
    //var fm2 = document.getElementById('secondform');
    //var fm3 = document.getElementById('thirdform');

    function banMenu(e) { e.preventDefault(); }
    //★休止解除予定
    //document.addEventListener("contextmenu", banMenu,false);
    //fm2.addEventListener("contextmenu", banMenu, false);
    //fm3.addEventListener("contextmenu", banMenu, false);

    var editableDiv = document.getElementById('textBox');

    function sMenu(e) {
            if (e.id == "textBox") {
                document.removeEventListener("contextmenu", banMenu, false);
            }
            else
            {
                e.preventDefault();
                document.addEventListener("contextmenu", banMenu, false);
            }
        }

    function handlepaste(e) {
        var types, pastedData, savedContent;

        // Browsers that support the 'text/html' type in the Clipboard API (Chrome, Firefox 22+)
        if (e && e.clipboardData && e.clipboardData.types && e.clipboardData.getData) {

            // Check for 'text/html' in types list. See abligh's answer below for deatils on
            // why the DOMStringList bit is needed. We cannot fall back to 'text/plain' as
            // Safari/Edge don't advertise HTML data even if it is available
            types = e.clipboardData.types;
            if (((types instanceof DOMStringList) && types.contains("text/html")) || (types.indexOf && types.indexOf('text/html') !== -1)) {
                return false;
            }
            else
            {
                setTimeout(function () {
                //ハイパーリンクの自動付与：ホームページ
                //var elms = document.getElementById('textBox').getElementsByTagName('div');
                var pasteText = document.getElementById('textBox').innerText;
                pasteText = pasteText.replace(/\r?\n/g, '\n');
                pasteText = pasteText.replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;")
                pasteText = pasteText.replace('　', ' ');
                var startkey = 'http';
                var stopkey1 = ' ';
                var stopkey2 = '\n';
                var startloc = 0;
                var endloc = 0;
                var startcount = 0;
                var urlarray = [];
                // 通常のfor文で行う
                for (var i = 0; i < pasteText.length; i++) {
                    if (pasteText.slice(i, i + startkey.length) === startkey) {
                        startloc = i;
                        /*startcount = startcount + 1;*/
                        /*endloc = i + 4;*/
                        var url_flag = false
                        for (var k = startloc; k < pasteText.length; k++) {
                            if (pasteText.slice(k, k + stopkey1.length) === stopkey1) {
                                endloc = k;
                                i = k + stopkey1.length;
                                url_flag = true;
                                break;
                            }
                            else if (pasteText.slice(k, k + stopkey2.length) === stopkey2) {
                                endloc = k;
                                i = k + stopkey1.length;
                                url_flag = true;
                                break;
                            }
                            else {

                            }
                        }
                        if (url_flag === true) {

                            urlarray.push(pasteText.slice(startloc, endloc));


                        }
                    }
                }
                var innerText = document.getElementById('textBox').innerHTML;
                {
                    //element = element.replace('<spert3>', '&');
                    urlarray.forEach(function (element) {
                        //alert(element);
                        if (innerText.includes('<a href="' + element)) {

                        }
                        else {
                            /*alert(element);*/
                            innerText = innerText.replace(element, '<a href="' + element + '">' + element + '</a>');
                            document.getElementById('textBox').innerHTML = innerText;

                        }
                    });
                }




                //ハイパーリンクの自動付与：サーバー
                //var elms = document.getElementById('textBox').getElementsByTagName('div');
                var pasteText = document.getElementById('textBox').innerText;
                pasteText = pasteText.replace(/\r?\n/g, '\n');

                pasteText = pasteText.replace('　', ' ');
                var startkey = '\\\\';
                var stopkey1 = ' ';
                var stopkey2 = '\n';
                var startloc = 0;
                var endloc = 0;
                var urlarray = [];
                // 通常のfor文で行う
                for (var i = 0; i < pasteText.length; i++) {
                    if (pasteText.slice(i, i + startkey.length) === startkey) {
                        startloc = i;
                        endloc = i + 4;
                        var url_flag = false
                        for (var k = startloc; k < pasteText.length; k++) {
                            if (pasteText.slice(k, k + stopkey1.length) === stopkey1) {
                                endloc = k;
                                i = k + stopkey1.length;
                                url_flag = true;
                                break;
                            }
                            else if (pasteText.slice(k, k + stopkey2.length) === stopkey2) {
                                endloc = k;
                                i = k + stopkey1.length;
                                url_flag = true;
                                break;
                            }
                            else {

                            }
                        }
                        if (url_flag === true) {
                            urlarray.push(pasteText.slice(startloc, endloc));


                        }
                    }
                }
                var innerText = document.getElementById('textBox').innerHTML;
                {
                    urlarray.forEach(function (element) {
                        if (~innerText.indexOf('<a href="' + 'file:///' + element + '">' + 'file:///' + element + '</a>')) {

                        }
                        else {
                            innerText = innerText.replace(element, '<a href="' + 'file:///' + element + '">' + 'file:///' + element + '</a>');
                            document.getElementById('textBox').innerHTML = innerText;

                        }
                    });
                }
                //ハイパーリンクの自動付与：ローカルリンク
                pasteText = document.getElementById('textBox').innerText;
                var startkey = 'C:\\';
                var stopkey1 = ' ';
                var stopkey2 = '\n';
                var startloc = 0;
                var endloc = 0;
                var urlarray2 = [];

                // 通常のfor文で行う
                for (var i = 0; i < pasteText.length; i++) {
                    if (/[a-zA-Z]:\\/.test(pasteText.slice(i, i + 3)) === true) {
                        startloc = i;
                        endloc = i + 4;
                        var url_flag = false
                        for (var k = startloc; k < pasteText.length; k++) {
                            if (pasteText.slice(k, k + stopkey1.length) === stopkey1) {
                                endloc = k;
                                i = k + stopkey1.length;
                                url_flag = true;
                                break;
                            }
                            else if (pasteText.slice(k, k + stopkey2.length) === stopkey2) {
                                endloc = k;
                                i = k + stopkey1.length;
                                url_flag = true;
                                break;
                            }
                            else {

                            }
                        }
                        if (url_flag === true) {
                            urlarray2.push(pasteText.slice(startloc, endloc));
                        }
                    }
                }
                var innerText = document.getElementById('textBox').innerHTML;
                {
                    urlarray2.forEach(function (element) {
                        if (~innerText.indexOf('<a href="' + 'file:///' + element + '">' + 'file:///' + element + '</a>')) {

                        }
                        else {
                            innerText = innerText.replace(element, '<a href="' + 'file:///' + element + '">' + 'file:///' + element + '</a>');
                            document.getElementById('textBox').innerHTML = innerText;
                        }
                    });
                }
     }, 500);
            }
        }
        return true;
    }

    // Modern browsers. Note: 3rd argument is required for Firefox <= 6
    if (editableDiv.addEventListener) {
        editableDiv.addEventListener('paste', handlepaste, false);
    }
    // IE <= 8
    else {
        editableDiv.attachEvent('onpaste', handlepaste);
    }

    function GetBody(indxstr) {

            const form = document.forms[2];
            FD = new FormData(form);
            //更新時非アクティブにする。
            document.getElementById("uploadd").disabled = true;
            document.getElementById("dropdownMenuButton2").disabled = true;
            document.getElementById("up").disabled = true;
            document.getElementById("down").disabled = true;
            document.getElementById("leftmove").disabled = true;
            document.getElementById("rightmove").disabled = true;

            locindx = indxstr;
            // データを FormData オブジェクトに投入します
            FD.append("indx", indxstr);
            FD.append("evnt", "listclick");


            // aysnchronous fetch ajax
            fetch(form.action,
                {
                    method: form.method,
                    body: FD
                }
            )
                // if any exceptions - log them
                .catch(err => console.log("network error: " + err))
                .then((response) => {
                    return response.json()　//ここでBodyからJSONを返す
                })
                .then((result) => {
                    Example(result);  //取得したJSONデータを関数に渡す
                    setTimeout(function () { chkstr = document.getElementById("textBox").innerHTML; }, 0);
                })

            oDoc = document.getElementById("textBox");
            //スクロールの位置を設定
            oDoc.scrollTop = 100;

        }


    window.addEventListener('scroll', function (e) {
        var target = document.getElementById('textBox');
        //target.onscroll = () => alert(target.scrollTop);
    });

        //JSONデータを引数に受け取ってDOM操作を行う関数を作成
        function Example(jsonObj) {
            const parsedObj = JSON.parse(jsonObj);
            textBox.innerHTML = parsedObj.body;
            var main = document.getElementById('textBox');
            main.scrollTop = parsedObj.scrollloc;
            //textBox.innerHTML = "TEST";
            //alert(textBox.innerHTML);
            title.value = parsedObj.title;
            titlev = parsedObj.title;
            updatedate.value = parsedObj.uploaddate;
            //document.getElementById("p1").innerHTML = "New text!";
            //document.getElementById("author").value = "New text!";
            author.value = parsedObj.author;
            //author.value = "TEST";
            //Element.update(author.value, "hogehoge");
            ///setTimeout(function () { author.value = "TEST"; }, 1);
            //var item = $('author.value');
            //Element.update(item, "hogehoge");
            var attach = parsedObj.attachfile;
            if (attach.length > 0) {
                document.getElementById("upload").innerHTML = "";
                attach.split(',').forEach(function (value) {
                    addOption(value);
                })

            }
            else
            {
                document.getElementById("upload").innerHTML = "";
                addNone();
            }


        }

        //JSONデータを引数に受け取ってDOM操作を行う関数を作成
        function Example2(jsonObj) {
            const parsedObj = JSON.parse(jsonObj);
            textBox.innerHTML = parsedObj.body;

            var link = parsedObj.attachlink;
            link = link.replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;");
            var winGoogle = window.open(link);
            document.addEventListener("pagesloaded", function (e) {
                arert("finished");
            });
    }

    function Example3(jsonObj) {
        const parsedObj = JSON.parse(jsonObj);
        var attach = parsedObj.attachfile;
        if (attach.length > 0) {
            document.getElementById("upload").innerHTML = "";
            attach.split(',').forEach(function (value) {
                addOption(value);
            })

        }
        else {
            document.getElementById("upload").innerHTML = "";
            addNone();
        }


    }
    function addOption(value) {

            // selectタグを取得する
            var select = document.getElementById("upload");
            // optionタグを作成する
            var option = document.createElement("option");
            // optionタグのテキストを4に設定する
            option.text = value;
            //option.text = "ファイル有り";
            option.index = 1;
            // selectタグの子要素にoptionタグを追加する
            select.appendChild(option);
            document.getElementById("uploadd").disabled = false;
            document.getElementById("dropdownMenuButton2").disabled = false;
            document.getElementById("up").disabled = false;
            document.getElementById("down").disabled = false;
            document.getElementById("leftmove").disabled = false;
            document.getElementById("rightmove").disabled = false;
        }

        function addNone() {
            // selectタグを取得する
            var select = document.getElementById("upload");
            // optionタグを作成する
            var option = document.createElement("option");
            // optionタグのテキストを4に設定する
            option.text = "ファイル無し";
            // selectタグの子要素にoptionタグを追加する
            select.appendChild(option);
            document.getElementById("uploadd").disabled = false;
            document.getElementById("dropdownMenuButton2").disabled = false;
            document.getElementById("up").disabled = false;
            document.getElementById("down").disabled = false;
            document.getElementById("leftmove").disabled = false;
            document.getElementById("rightmove").disabled = false;
        }
    
    //修正中
    function TempSetting() {
        const select = document.forms[2].ddProducts
        const index = select.selectedIndex;

        const form = document.forms[1];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("evnt", "upload1");
        FD.append("indx", index);
        // aysnchronous fetch ajax
        fetch(form.action,
        {
            method: form.method,
            body: FD
        }
        )
        .then(response => document.location.reload())
    }
    function addItems() {
        var numberOfItems = 5;
        for (var i = 0; i < numberOfItems; i++) {
            var ele = document.createElement("a");
            ele.classList = "dropdown-item";
            ele.href = "#";
            ele.innerText = "" + i;
            document.querySelector(".dropdown-menu").appendChild(ele);
        }
    }
    function Attach(value) {
        const select = document.forms[2].ddProducts
        const index = select.selectedIndex;
        if (value != "ファイル無し") {
            const form = document.forms[2];
            FD = new FormData(form);
            // データを FormData オブジェクトに投入します
            FD.append("evnt", "attach");
            FD.append("attachname", value);
            FD.append("indx", index);
            // aysnchronous fetch ajax
            fetch(form.action,
                {
                    method: form.method,
                    body: FD
                }
            )
                // if any exceptions - log them
                .catch(err => console.log("network error: " + err))
                .then((response) => {
                    return response.json()　//ここでBodyからJSONを返す
                })
                .then((result) => {
                    Example2(result);  //取得したJSONデータを関数に渡す
                })
        }
    }
    function showGenre1() {
        if (titlev == "") {
            document.getElementById("change").innerText = "変更するタイトルを入力してください。";
            document.getElementById("title").value = @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(IndexModel.title)));
            //
        } else
            document.getElementById("change").innerText = "変更するタイトルを入力してください。";
    }
    function showGenre2(item) {
        /*newDoc();*/
        if (titlev == "") {
            document.getElementById("newtitle").innerText = "ドキュメントを追加します。";
            document.getElementById("title2").value = @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(IndexModel.title)));
            //
        } else
            document.getElementById("newtitle").innerText = "ドキュメントを追加します。";
    }
    function showGenre3(item1,item2) {
        saveDoc(item1, item2);
    }
    function showGenre4() {
        if (titlev == "") {
            document.getElementById("deletetitle").innerText = "タイトル「" + @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(IndexModel.title))) + "」を削除します。";
        } else
            document.getElementById("deletetitle").innerText = "タイトル「" + titlev + "」を削除します。";
    }

    function TytleChange() {
        var title = document.getElementById("title").value;
        const form = document.forms[0];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("evnt", "tytlechanged");
        //FD.append("indx", "pass");
        FD.append("title", title);
        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    //textbox.innerHTML = data
                    document.location.reload();
                });
            })
    }
    function TabNameChange() {
        
        var tabname = document.getElementById("tabname2").value;
        const form = document.forms[0];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("evnt", "tabnamechanged");
        //FD.append("indx", "pass");
        FD.append("tabname", tabname);
        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    //textbox.innerHTML = data
                    document.location.reload();
                });
            })
    }
    function DeleteDoc() {

        const form = document.forms[0];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("evnt", "deleted");

        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    //textbox.innerHTML = data
                    document.location.reload();
                });
            })
    }
    function AddTab() {
        var addtab = document.getElementById("tabname").value;
        const form = document.forms[0];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("evnt", "addtab");
        FD.append("addtab", addtab);

        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    //textbox.innerHTML = data
                    document.location.reload();
                });
            })
    }
    function InactiveTab() {

        const form = document.forms[0];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("evnt", "inactivetab");

        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    //textbox.innerHTML = data
                    document.location.reload();
                });
            })
    }
    function ShowTab() {
        var e = document.getElementById("show");
        var value = e.value;
        var text = e.options[e.selectedIndex].text;

        const form = document.forms[0];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("evnt", "showtab");
        FD.append("showtab", text);
        FD.append("deleteno", value);

        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    //textbox.innerHTML = data
                    document.location.reload();
                });
            })
    }
    function DeleteTab() {
        const form = document.forms[0];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("evnt", "deletetab");
        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    //textbox.innerHTML = data
                    document.location.reload();
                });
            })
    }
    function myHandler2(e) {
        if (e.target.tagName.toLowerCase() === 'a' && event.target.id == "") {
            //httpで始まる
            if (~event.target.innerHTML.indexOf('http')) {
                window.open(event.target.href, '_blank');
                //それ以外
            } else {
                alert("ローカルファイルを開きます。");
                window.open(event.target.href, '_blank');
            }
        }
    }

    $(document).ready(myHandler2);
    $("#textBox").on("click", myHandler2);
    function Expand() {
        const form = document.forms[3];
        FD = new FormData(form);
        // データを FormData オブジェクトに投入します
        FD.append("indx", 'pass');
        FD.append("evnt", "expand1");

        // aysnchronous fetch ajax
        fetch(form.action,
            {
                method: form.method,
                body: FD
            }
        )
            // if any exceptions - log them
            .catch(err => console.log("network error: " + err))
            .then(response => {

                // read json from the response stream
                // and display the data
                response.json().then(data => {
                    document.location.reload();
                });
            })
    }

    function Copy() {
        if (switchBox.checked = true) {
            var text = document.getElementById('textBox').innerText;
        }
        if (switchBox.checked = false) {
            var text = document.getElementById('textBox').innerHTML;
        }

        navigator.clipboard.writeText(text).then(function () {
            if (switchBox.checked = true) {
                alert('テキストをクリップボードにコピーしました。');
            }
            if (switchBox.checked = false) {
                alert('HTMLをクリップボードにコピーしました。');
            }
        }, function (err) {
            alert('コピーエラー');
        });
    }
            </script>
        </body>
    </head>
</html>
    @*</div>*@

}
@if (@IndexModel.screenmode == "searched")
{
    <!DOCTYPE html>
    <html lang="ja">
    <head>
        <link rel="apple-touch-icon" sizes="57x57" href="./apple-icon-57x57.png">
        <link rel="apple-touch-icon" sizes="60x60" href="./apple-icon-60x60.png">
        <link rel="apple-touch-icon" sizes="72x72" href="./apple-icon-72x72.png">
        <link rel="apple-touch-icon" sizes="76x76" href="./apple-icon-76x76.png">
        <link rel="apple-touch-icon" sizes="114x114" href="./apple-icon-114x114.png">
        <link rel="apple-touch-icon" sizes="120x120" href="./apple-icon-120x120.png">
        <link rel="apple-touch-icon" sizes="144x144" href="./apple-icon-144x144.png">
        <link rel="apple-touch-icon" sizes="152x152" href="./apple-icon-152x152.png">
        <link rel="apple-touch-icon" sizes="180x180" href="./apple-icon-180x180.png">
        <link rel="icon" type="image/png" sizes="192x192" href="./android-icon-192x192.png">
        <link rel="icon" type="image/png" sizes="32x32" href="./favicon-32x32.png">
        <link rel="icon" type="image/png" sizes="96x96" href="./favicon-96x96.png">
        <link rel="icon" type="image/png" sizes="16x16" href="./favicon-16x16.png">
        <link rel="shortcut icon" href="./favicon-96x96.png">
        <link rel="manifest" href="./manifest.json">
        <meta name="msapplication-TileColor" content="#ffffff">
        <meta name="msapplication-TileImage" content="./ms-icon-144x144.png">
        <meta name="theme-color" content="#ffffff">
        @*<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">*@
        <meta charset="UTF-8">
        <title>Life NOTE</title>
        <body>

            <form method="post" name="firstbuttons" id="firstform">
                <div class="row" style="height:auto;">
                    <div class="itemtitle col-md-6">
                        <div class="input-group">
                            <div class="itemtitle col-md-6">
                                <div class="form-group">
                                    <input class="form-control border-end-0 border" type="text" value="@IndexModel.key2" id="keyword" disabled="disabled">
                                    @*<input type="text" class="form-control" value="@IndexModel.key2" id="keyword" disabled="disabled">*@
                                </div>
                            </div>
                            <div class="itemtitle col-md-6">
                                <input type="button" value="前画面に戻る" id="back" class="btn btn-secondary" onclick="Back()">
                            </div>
                        </div>
                        @*<div class="form-group">
                    <input type="text" class="form-ctextontrol" id="search" placeholder="キーワード" style="min-width: 100%!important;">
                    </div>*@
                    </div>

                </div>
                <div class="row" style="height:auto">
                    <div class="itemtitle col-md-6">
                        <input class="form-control" type="text" id="message" disabled="disabled" style="min-width: 100% !important; margin: 7px; margin-left: -1px;" value="@IndexModel.errormessage">
                    </div>
                    @*<div class="itemtitle col-md-6">*@
                    <input class="form-control" name="updatedate" id="updatedate" type="text" value="@IndexModel.updatedate" disabled="disabled" style="width: 178px !important; margin: 7px;" />
                    <input class="form-control" name="author" id="author" type="text" value="@IndexModel.author" disabled="disabled" style="width: auto !important; margin: 7px;" />
                    @*</div>*@
                </div>
            </form>
            @{
                var html1 = "<div class=\"cp_tab\">";
                for (int i = 1; i <= IndexModel.datasize; i++)
                {
                    if (i == 1)
                    {
                        html1 = html1 + "<input type=\"radio\" name=\"cp_tab\" id=\"tab3_" + i + "\" aria-controls=\"" + IndexModel.Numbers[i - 1] + "【" + IndexModel.srcAlldoc[i - 1].Count + "】" + "\" checked onclick=\"TabClick(this.id)\">" +
                        "        <label for=\"tab3_" + i + "\">" + IndexModel.titlenamelist[i - 1] + "【" + IndexModel.srcAlldoc[i - 1].Count + "】件" + "</label>";
                    }
                    else
                    {
                        html1 = html1 + "<input type=\"radio\" name=\"cp_tab\" id=\"tab3_" + i + "\" aria-controls=\"" + IndexModel.Numbers[i - 1] + "\"onclick=\"TabClick(this.id)\">" +
                        "                <label for=\"tab3_" + i + "\">" + IndexModel.titlenamelist[i - 1] + "【" + IndexModel.srcAlldoc[i - 1].Count + "】件" + "</label>";
                    }
                }
                @Html.Raw(html1)
                ;
            }
            @{
                var html_head = "<div class=\"cp_tabpanels\">";
                for (int i = 1; i <= IndexModel.selecttab; i++)
                {
                    if (i == IndexModel.selecttab)
                    {
                        html_head = html_head + "<div id=\"" + IndexModel.Numbers[i - 1] + "\" class=\"cp_tabpanel\">";
                    }
                    else
                    {
                        html_head = html_head + "<div id=\"" + IndexModel.Numbers[i - 1] + "\" class=\"cp_tabpanel\">" +
                        "                    </div>";
                    }

                }
                @Html.Raw(html_head)
                ;
            }
            <form method="post" name="tytlebuttons" id="secondform">
                <div class="row">
                    <div class="itemtitle col-md-6">
                        <div class="dropdown d-inline-block">
                            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                ファイル
                            </button>
                            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                <a class="dropdown-item" href="#" id="changetitle" data-toggle="modal" data-target="#exampleModal4" onclick="showGenre1()">タイトル編集・変更 </a>
                                <a class="dropdown-item" href="#" id="savedoc" onclick="saveDoc(textBox.innerText,textBox.innerHTML)">保存</a>
                                <a class="dropdown-item" href="#" id="delete" data-toggle="modal" data-target="#exampleModal5" onclick="showGenre4()">削除</a>
                            </div>
                        </div>
                        <input type="button" value="ｱｯﾌﾟﾛｰﾄﾞ" id="uploadd" class="btn btn-secondary" onclick="TempSetting()">
                        <input type="hidden" asp-for="Name" value="btn" />
                        <select class="selectpicker " name="attach" id="upload" style="width: 300px; height: 35px; font-size: 17px;" onclick="Attach(this[this.selectedIndex].value)">
                            <option value="test">no attach files</option>
                        </select>
                        <input type="button" value="コピー" class="btn btn-secondary" id="copy" onclick="Copy()">
                        <img class="intLink" style="width: 40px; height: 40px; margin-left: 10px" title="拡大" id="exp" onclick="Expand()" src="expandt.png" />
                    </div>
                    <div class="itemtitle col-md-6">
                        <div id="toolBar1" style="margin-left:15px">
                            <select class="selectpicker pull-right" onchange="formatDoc('formatblock',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                                <option selected>フォーマット</option>
                                <option value="h1">タイトル 1 &lt;h1&gt;</option>
                                <option value="h2">タイトル 2 &lt;h2&gt;</option>
                                <option value="h3">タイトル 3 &lt;h3&gt;</option>
                                <option value="h4">タイトル 4 &lt;h4&gt;</option>
                                <option value="h5">タイトル 5 &lt;h5&gt;</option>
                                <option value="h6">サブタイトル &lt;h6&gt;</option>
                                <option value="p">パラグラフ &lt;p&gt;</option>
                                <option value="pre">プリフォーマット &lt;pre&gt;</option>
                            </select>
                            <select class="selectpicker pull-right" onchange="formatDoc('fontname',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                                <option class="heading" selected>フォント</option>
                                <option>Arial</option>
                                <option>Arial Black</option>
                                <option>Courier New</option>
                                <option>Times New Roman</option>
                                <option>ＭＳ ゴシック</option>
                                <option>ＭＳ Ｐゴシック</option>
                                <option>ＭＳ 明朝</option>
                                <option>ＭＳ Ｐ明朝</option>
                                <option>Impact</option>
                            </select>
                            <select class="selectpicker pull-right" onchange="formatDoc('fontsize',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                                <option class="heading" selected>サイズ</option>
                                <option value="1">極小</option>
                                <option value="2">小</option>
                                <option value="3">標準</option>
                                <option value="4">中大</option>
                                <option value="5">大</option>
                                <option value="6">大大</option>
                                <option value="7">最大</option>
                            </select>
                            <select class="selectpicker pull-right" onchange="formatDoc('forecolor',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                                <option class="heading" selected>色</option>
                                <option value="red">赤</option>
                                <option value="blue">青</option>
                                <option value="green">緑</option>
                                <option value="black">黒</option>
                            </select>
                            <select class="selectpicker pull-right" onchange="formatDoc('backcolor',this[this.selectedIndex].value);this.selectedIndex=0;" style="height: 35px; font-size: 17px;">
                                <option class="heading" selected>背景</option>
                                <option value="red">赤</option>
                                <option value="green">緑</option>
                                <option value="black">黒</option>
                            </select>
                        </div>
                        <div id="loader">
                            <div class="sk-chase">
                                <div class="sk-chase-dot"></div>
                                <div class="sk-chase-dot"></div>
                                <div class="sk-chase-dot"></div>
                                <div class="sk-chase-dot"></div>
                                <div class="sk-chase-dot"></div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="itemtitle col-md-12">
                            <div id="toolBar2" style="margin-left: 10px">

                                <img class="intLink" style="width :40px; height :40px" title="戻る" onclick="formatDoc('undo');" src="Undo.png" />
                                <img class="intLink" style="width :40px; height :40px" title="進む" onclick="formatDoc('redo');" src="Redo.png" />
                                <img class="intLink" style="width :40px; height :40px" title="フォーマット削除" onclick="formatDoc('removeFormat')" src="Remove formatting.png">
                                <img class="intLink" style="width :40px; height :40px" title="太字" onclick="formatDoc('bold');" src="Bold.png" />
                                <img class="intLink" style="width :40px; height :40px" title="イタリック" onclick="formatDoc('italic');" src="Italic.png" />
                                <img class="intLink" style="width :40px; height :40px" title="下線" onclick="formatDoc('underline');" src="Underline.png" />
                                <img class="intLink" style="width :40px; height :40px" title="左揃え" onclick="formatDoc('justifyleft');" src="Left align.png" />
                                <img class="intLink" style="width :40px; height :40px" title="中央揃え" onclick="formatDoc('justifycenter');" src="Center align.png" />
                                <img class="intLink" style="width :40px; height :40px" title="右揃え" onclick="formatDoc('justifyright');" src="Right align.png" />
                                <img class="intLink" style="width :40px; height :40px" title="ナンバリング" onclick="formatDoc('insertorderedlist');" src="Numbered list.png" />
                                <img class="intLink" style="width :40px; height :40px" title="箇条書" onclick="formatDoc('insertunorderedlist');" src="Dotted list.png" />
                                <img class="intLink" style="width :40px; height :40px" title="インデント削除" onclick="formatDoc('outdent');" src="Delete indentation.png" />
                                <img class="intLink" style="width :40px; height :40px" title="インデント追加" onclick="formatDoc('indent');" src="Add indentation.png" />
                                <img class="intLink" style="width :40px; height :40px" title="ハイパーリンク" onclick="var sLnk=prompt('Write the URL here','http:\/\/');if(sLnk&&sLnk!=''&&sLnk!='http://'){formatDoc('createlink',sLnk)}" src="Hyperlink.png" />
                                <img class="intLink" style="width :40px; height :40px" title="カット" onclick="formatDoc('cut');" src="Cut.png" />
                            </div>
                        </div>
                    </div>
                </div>

            </form>
            <form method="post" name="tytlecolumn" id="thirdform">
                <p class="tab1">
                    <select class="same-width-list" style="@IndexModel.textheight" size="20" id="ddlProducts" name="ddProducts" onchange="GetBody(this[this.selectedIndex].value)">
                        @for (int i = 0; i <= IndexModel.srcAlldoc[IndexModel.selecttab - 1].Count - 1; i++)
                        {
                            <option value="@i">@IndexModel.srcAlldoc[IndexModel.selecttab - 1][i].Title</option>
                        }
                    </select>
                    <input type="hidden" asp-for="Name" value="tab1" />
                </p>
            </form>

            <body onload="initDoc();">
                <form name="compForm" method="post" onsubmit="if(validateMode()){this.myDoc.value=oDoc.innerHTML;return true;}return false;">
                    <input type="hidden" name="myDoc">
                    <div id="textBox" contenteditable="true" style="@IndexModel.textheight">@Html.Raw(IndexModel.bodyelement)</div>
                    <p id="editMode"><input type="hidden" name="switchMode" id="switchBox" onchange="setDocMode(this.checked);" /></p>
                </form>
            </body>
            @{
                var html_foot = "</div>";

                for (int i = IndexModel.selecttab + 1; i <= IndexModel.datasize; i++)
                {
                    html_foot = html_foot + "<div id=\"" + IndexModel.Numbers[i - 1] + "\" class=\"cp_tabpanel\">" +
                    "                    </div>";

                }
                @Html.Raw(html_foot + "</div></div>")
                ;
            }

           


            @*<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.15.0/umd/popper.min.js"></script>*@


            <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut" crossorigin="anonymous"></script>
            <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js" integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k" crossorigin="anonymous"></script>
            <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css'>


            <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>



            <script type="text/javascript">

                var oDoc, sDefTxt, locindx;
                //タブが1個の場合はアクティブに
                var tab = document.getElementById("@IndexModel.activetabname");
                tab.draggable = false;
                //初期リストの名前 title
                //タブが1個の場合はアクティブに
                tab.checked = true;

                var titlev = "";
                var rtime;
                var timeout = false;
                var delta = 2000;
                var chkstr = "";

                /*document.location.reload()*/
                const loader = document.getElementById('loader');
                loader.style = "display:none;";
                loader.disabled;
                //var exp = document.getElementById(exp);
                //exp.draggable = true;

                setTimeout(function () { chkstr = document.getElementById("textBox").innerHTML; }, 0);
                //自動保存
                var updatef = true
                const ev = function () {
                    var chkstr2 = document.getElementById("textBox").innerHTML
                    if (updatef == true) {
                        //alert("hit");
                        //alert(chkstr2);
                        if (chkstr != chkstr2) {
                            //自動保存処理
                            //alert(chkstr);
                            //alert(chkstr2);
                            textbody = document.getElementById('textBox').innerText;
                            htmlbody = document.getElementById('textBox').innerHTML;
                            document.getElementById('loader').style = "display: normal;";
                            /*alert("start");*/
                            const form = document.forms[3];
                            FD = new FormData(form);
                            // データを FormData オブジェクトに投入します
                            /*FD.append("indx", 'pass');*/
                            FD.append("evnt", "save");
                            FD.append("textbody", textbody);
                            FD.append("htmlbody", htmlbody);
                            var main = document.getElementById('textBox');
                            var sctop = main.scrollTop;
                            FD.append("scrollTop", sctop);
                            // aysnchronous fetch ajax
                            fetch(form.action,
                                {
                                    method: form.method,
                                    body: FD
                                }
                            )
                                // if any exceptions - log them
                                .catch(err => alert("network error: " + err))
                                .then(response => {

                                    // read json from the response stream
                                    // and display the data
                                    response.json().then(data => {

                                        rtime = new Date();
                                        if (timeout === false) {
                                            timeout = true;
                                            setTimeout(resizeend, delta);
                                        }
                                    });
                                })
                                .then((result) => {
                                    Example(result);  //取得したJSONデータを関数に渡す
                                    //setTimeout(function () { chkstr = document.getElementById("textBox").innerHTML; }, 0);
                                })

                        }
                        chkstr = document.getElementById("textBox").innerHTML
                    }
                };
                setInterval(ev, 1000);

                var select = document.getElementById("ddlProducts");
                //初期リストの位置
                select.options["@IndexModel.locstr"].selected = true;
                //★初期リストの位置の添付ファイル attachfile
                var initattach = @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(IndexModel.attachfile)));

                //var initattach = "test1,test2";

                if (initattach.length > 0) {
                    document.getElementById("upload").innerHTML = "";
                    initattach.split(',').forEach(function (value) {
                        //alert("hit");
                        addOption(value);
                    })

                }
                else {
                    document.getElementById("upload").innerHTML = "";
                    addNone();
                }



                function stopWinClose(e) {
                    e.preventDefault();
                    e.returnValue = '';

                }

                function resizeend() {
                    if (new Date() - rtime < delta) {
                        setTimeout(resizeend, delta);
                        window.addEventListener("beforeunload", stopWinClose, true);

                    } else {
                        timeout = false;
                        /*alert("HIT");*/

                        window.removeEventListener("beforeunload", stopWinClose, true);

                        document.getElementById('loader').style = "display: none;";
                    }
                }

                function myHandler3(e) {
                    if (e.keyCode == 123) {
                        /*alert("F12");*/
                        e.stopPropagation();
                        e.preventDefault();
                    }
                    if (e.ctrlKey && e.keyCode == 85) {
                        /*alert("CTRL+U");*/
                        e.stopPropagation();
                        e.preventDefault();
                    }
                    if (e.ctrlKey && e.shiftKey && e.keyCode == 73) {
                        /*alert("CTRL+Shift+I");*/
                        e.stopPropagation();
                        e.preventDefault();
                    }
                }

                document.addEventListener("keydown", myHandler3, false);

                function initDoc() {
                    oDoc = document.getElementById("textBox");
                    oDoc.scrollTop = "@IndexModel.scrollloc";
                    const form = document.forms[0];
                    FD = new FormData(form);
                    // データを FormData オブジェクトに投入します

                    FD.append("evnt", "openattach");
                    // aysnchronous fetch ajax
                    fetch(form.action,
                        {
                            method: form.method,
                            body: FD
                        }
                    )
                        // if any exceptions - log them
                        .catch(err => console.log("network error: " + err))
                        .then((response) => {
                            return response.json()　//ここでBodyからJSONを返す
                        })
                        .then((result) => {
                            Example3(result);  //取得したJSONデータを関数に渡す
                        })
                    sDefTxt = oDoc.innerHTML;

                    var select = document.getElementById("ddlProducts");
                    select.options["@IndexModel.locstr"].selected = true;
                    if (document.compForm.switchMode.checked) { setDocMode(true); }
                }

                function formatDoc(sCmd, sValue) {
                    if (validateMode()) { document.execCommand(sCmd, false, sValue); oDoc.focus(); }
                }

                function validateMode() {
                    if (!document.compForm.switchMode.checked) { return true; }
                    alert("Uncheck \"Show HTML\".");
                    oDoc.focus();
                    return false;
                }

                function setDocMode(bToSource) {
                    var oContent;
                    if (bToSource) {
                        oContent = document.createTextNode(oDoc.innerHTML);
                        oDoc.innerHTML = "";
                        var oPre = document.createElement("pre");
                        oDoc.contentEditable = false;
                        oPre.id = "sourceText";
                        oPre.contentEditable = true;
                        oPre.appendChild(oContent);
                        oDoc.appendChild(oPre);
                        document.execCommand("defaultParagraphSeparator", false, "div");
                    } else {
                        if (document.all) {
                            oDoc.innerHTML = oDoc.innerText;
                        } else {
                            oContent = document.createRange();
                            oContent.selectNodeContents(oDoc.firstChild);
                            oDoc.innerHTML = oContent.toString();
                        }
                        oDoc.contentEditable = true;
                    }
                    oDoc.focus();
                }

                function printDoc() {
                    if (!validateMode()) { return; }
                    var oPrntWin = window.open("", "_blank", "width=450,height=470,left=400,top=100,menubar=yes,toolbar=no,location=no,scrollbars=yes");
                    oPrntWin.document.open();
                    oPrntWin.document.write("<!doctype html><html><head><title>Print<\/title><\/head><body onload=\"print();\">" + oDoc.innerHTML + "<\/body><\/html>");
                    oPrntWin.document.close();
                }
                function saveDoc(textbody, htmlbody) {

                    const form = document.forms[3];
                    FD = new FormData(form);
                    // データを FormData オブジェクトに投入します
                    FD.append("textbody", textbody);
                    FD.append("htmlbody", htmlbody);
                    FD.append("indx", 'pass');
                    FD.append("evnt", "save");
                    var main = document.getElementById('textBox');
                    var sctop = main.scrollTop;
                    FD.append("scrollTop", sctop);

                    fetch(form.action,
                        {
                            method: form.method,
                            body: FD
                        }
                    )
                        // if any exceptions - log them
                        .catch(err => console.log("network error: " + err))
                        .then(response => {

                            // read json from the response stream
                            // and display the data
                            response.json().then(data => { document.location.reload(); });
                        })

                }
                function Back() {
                    const form = document.forms[1];
                    FD = new FormData(form);
                    // データを FormData オブジェクトに投入します
                    FD.append("indx", 'pass');
                    FD.append("evnt", "back");

                    // aysnchronous fetch ajax
                    fetch(form.action,
                        {
                            method: form.method,
                            body: FD
                        }
                    )
                        // if any exceptions - log them
                        .catch(err => console.log("network error: " + err))
                        .then(response => {

                            // read json from the response stream
                            // and display the data
                            response.json().then(data => {
                                document.location.reload();
                            });
                        })

                }
                function TytleChange() {
                    var title = document.getElementById("title").value;
                    const form = document.forms[0];
                    FD = new FormData(form);
                    // データを FormData オブジェクトに投入します
                    FD.append("evnt", "tytlechanged2");
                    //FD.append("indx", "pass");
                    FD.append("title", title);
                    // aysnchronous fetch ajax
                    fetch(form.action,
                        {
                            method: form.method,
                            body: FD
                        }
                    )
                        // if any exceptions - log them
                        .catch(err => console.log("network error: " + err))
                        .then(response => {

                            // read json from the response stream
                            // and display the data
                            response.json().then(data => {
                                //textbox.innerHTML = data
                                document.location.reload();
                            });
                        })
                }
                function TabClick(id) {
                    var tabno = id.split('_');
                    const form = document.forms[3];
                    FD = new FormData(form);

                    FD.append("tabno", tabno[1]);
                    FD.append("evnt", "tabclick2");


                    // aysnchronous fetch ajax
                    fetch(form.action,
                        {
                            method: form.method,
                            body: FD
                        }
                    )
                        // if any exceptions - log them
                        .catch(err => console.log("network error: " + err))
                        .then(response => {

                            // read json from the response stream
                            // and display the data
                            response.json().then(data => {
                                document.location.reload();
                            });
                        })
                }

                //右クリックを不能にする
                //var fm1 = document.getElementById('firstform');
                //var fm2 = document.getElementById('secondform');
                //var fm3 = document.getElementById('thirdform');

                function banMenu(e) { e.preventDefault(); }
                //★休止解除予定
                document.addEventListener("contextmenu", banMenu, false);
                //fm2.addEventListener("contextmenu", banMenu, false);
                //fm3.addEventListener("contextmenu", banMenu, false);

                var editableDiv = document.getElementById('textBox');

                function sMenu(e) {
                    if (e.id == "textBox") {
                        document.removeEventListener("contextmenu", banMenu, false);
                    }
                    else {
                        e.preventDefault();
                        document.addEventListener("contextmenu", banMenu, false);
                    }
                }

                function handlepaste(e) {
                    var types, pastedData, savedContent;

                    // Browsers that support the 'text/html' type in the Clipboard API (Chrome, Firefox 22+)
                    if (e && e.clipboardData && e.clipboardData.types && e.clipboardData.getData) {

                        // Check for 'text/html' in types list. See abligh's answer below for deatils on
                        // why the DOMStringList bit is needed. We cannot fall back to 'text/plain' as
                        // Safari/Edge don't advertise HTML data even if it is available
                        types = e.clipboardData.types;
                        if (((types instanceof DOMStringList) && types.contains("text/html")) || (types.indexOf && types.indexOf('text/html') !== -1)) {
                            return false;
                        }
                        else {
                            setTimeout(function () {
                                //ハイパーリンクの自動付与：ホームページ
                                //var elms = document.getElementById('textBox').getElementsByTagName('div');
                                var pasteText = document.getElementById('textBox').innerText;
                                pasteText = pasteText.replace(/\r?\n/g, '\n');
                                pasteText = pasteText.replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;")
                                pasteText = pasteText.replace('　', ' ');
                                var startkey = 'http';
                                var stopkey1 = ' ';
                                var stopkey2 = '\n';
                                var startloc = 0;
                                var endloc = 0;
                                var startcount = 0;
                                var urlarray = [];
                                // 通常のfor文で行う
                                for (var i = 0; i < pasteText.length; i++) {
                                    if (pasteText.slice(i, i + startkey.length) === startkey) {
                                        startloc = i;
                                        /*startcount = startcount + 1;*/
                                        /*endloc = i + 4;*/
                                        var url_flag = false
                                        for (var k = startloc; k < pasteText.length; k++) {
                                            if (pasteText.slice(k, k + stopkey1.length) === stopkey1) {
                                                endloc = k;
                                                i = k + stopkey1.length;
                                                url_flag = true;
                                                break;
                                            }
                                            else if (pasteText.slice(k, k + stopkey2.length) === stopkey2) {
                                                endloc = k;
                                                i = k + stopkey1.length;
                                                url_flag = true;
                                                break;
                                            }
                                            else {

                                            }
                                        }
                                        if (url_flag === true) {

                                            urlarray.push(pasteText.slice(startloc, endloc));


                                        }
                                    }
                                }
                                var innerText = document.getElementById('textBox').innerHTML;
                                {
                                    //element = element.replace('<spert3>', '&');
                                    urlarray.forEach(function (element) {
                                        //alert(element);
                                        if (innerText.includes('<a href="' + element)) {

                                        }
                                        else {
                                            /*alert(element);*/
                                            innerText = innerText.replace(element, '<a href="' + element + '">' + element + '</a>');
                                            document.getElementById('textBox').innerHTML = innerText;

                                        }
                                    });
                                }




                                //ハイパーリンクの自動付与：サーバー
                                //var elms = document.getElementById('textBox').getElementsByTagName('div');
                                var pasteText = document.getElementById('textBox').innerText;
                                pasteText = pasteText.replace(/\r?\n/g, '\n');

                                pasteText = pasteText.replace('　', ' ');
                                var startkey = '\\\\';
                                var stopkey1 = ' ';
                                var stopkey2 = '\n';
                                var startloc = 0;
                                var endloc = 0;
                                var urlarray = [];
                                // 通常のfor文で行う
                                for (var i = 0; i < pasteText.length; i++) {
                                    if (pasteText.slice(i, i + startkey.length) === startkey) {
                                        startloc = i;
                                        endloc = i + 4;
                                        var url_flag = false
                                        for (var k = startloc; k < pasteText.length; k++) {
                                            if (pasteText.slice(k, k + stopkey1.length) === stopkey1) {
                                                endloc = k;
                                                i = k + stopkey1.length;
                                                url_flag = true;
                                                break;
                                            }
                                            else if (pasteText.slice(k, k + stopkey2.length) === stopkey2) {
                                                endloc = k;
                                                i = k + stopkey1.length;
                                                url_flag = true;
                                                break;
                                            }
                                            else {

                                            }
                                        }
                                        if (url_flag === true) {
                                            urlarray.push(pasteText.slice(startloc, endloc));


                                        }
                                    }
                                }
                                var innerText = document.getElementById('textBox').innerHTML;
                                {
                                    urlarray.forEach(function (element) {
                                        if (~innerText.indexOf('<a href="' + 'file:///' + element + '">' + 'file:///' + element + '</a>')) {

                                        }
                                        else {
                                            innerText = innerText.replace(element, '<a href="' + 'file:///' + element + '">' + 'file:///' + element + '</a>');
                                            document.getElementById('textBox').innerHTML = innerText;

                                        }
                                    });
                                }
                                //ハイパーリンクの自動付与：ローカルリンク
                                pasteText = document.getElementById('textBox').innerText;
                                var startkey = 'C:\\';
                                var stopkey1 = ' ';
                                var stopkey2 = '\n';
                                var startloc = 0;
                                var endloc = 0;
                                var urlarray2 = [];

                                // 通常のfor文で行う
                                for (var i = 0; i < pasteText.length; i++) {
                                    if (/[a-zA-Z]:\\/.test(pasteText.slice(i, i + 3)) === true) {
                                        startloc = i;
                                        endloc = i + 4;
                                        var url_flag = false
                                        for (var k = startloc; k < pasteText.length; k++) {
                                            if (pasteText.slice(k, k + stopkey1.length) === stopkey1) {
                                                endloc = k;
                                                i = k + stopkey1.length;
                                                url_flag = true;
                                                break;
                                            }
                                            else if (pasteText.slice(k, k + stopkey2.length) === stopkey2) {
                                                endloc = k;
                                                i = k + stopkey1.length;
                                                url_flag = true;
                                                break;
                                            }
                                            else {

                                            }
                                        }
                                        if (url_flag === true) {
                                            urlarray2.push(pasteText.slice(startloc, endloc));
                                        }
                                    }
                                }
                                var innerText = document.getElementById('textBox').innerHTML;
                                {
                                    urlarray2.forEach(function (element) {
                                        if (~innerText.indexOf('<a href="' + 'file:///' + element + '">' + 'file:///' + element + '</a>')) {

                                        }
                                        else {
                                            innerText = innerText.replace(element, '<a href="' + 'file:///' + element + '">' + 'file:///' + element + '</a>');
                                            document.getElementById('textBox').innerHTML = innerText;
                                        }
                                    });
                                }
                            }, 500);
                        }
                    }
                    return true;
                }

                function myHandler2(e) {
                if (e.target.tagName.toLowerCase() === 'a' && event.target.id == "") {
                    //httpで始まる
                    if (~event.target.innerHTML.indexOf('http')) {
                        window.open(event.target.href, '_blank');
                        //それ以外
                    } else {
                        alert("ローカルファイルを開きます。");
                        window.open(event.target.href, '_blank');
                    }
                }
            }

            $(document).ready(myHandler2);
            $("#textBox").on("click", myHandler2);

                // Modern browsers. Note: 3rd argument is required for Firefox <= 6
                if (editableDiv.addEventListener) {
                    editableDiv.addEventListener('paste', handlepaste, false);
                }
                // IE <= 8
                else {
                    editableDiv.attachEvent('onpaste', handlepaste);
                }
                function GetBody(indxstr) {
                    updatef = false;
                    const form = document.forms[3];
                    FD = new FormData(form);
                    //更新時非アクティブにする。
                    document.getElementById("uploadd").disabled = true;
                    document.getElementById("dropdownMenuButton2").disabled = true;
                    //document.getElementById("up").disabled = true;
                    //document.getElementById("down").disabled = true;
                    //document.getElementById("leftmove").disabled = true;
                    //document.getElementById("rightmove").disabled = true;

                    locindx = indxstr;
                    // データを FormData オブジェクトに投入します
                    FD.append("indx", indxstr);
                    FD.append("evnt", "listclick2");


                    // aysnchronous fetch ajax
                    fetch(form.action,
                        {
                            method: form.method,
                            body: FD
                        }
                    )
                        // if any exceptions - log them
                        .catch(err => console.log("network error: " + err))
                        .then((response) => {
                            return response.json()　//ここでBodyからJSONを返す
                        })
                        .then((result) => {
                            Example(result);  //取得したJSONデータを関数に渡す
                            setTimeout(function () { chkstr = document.getElementById("textBox").innerHTML; }, 0);
                        })

                    oDoc = document.getElementById("textBox");
                    //スクロールの位置を設定
                    oDoc.scrollTop = 100;

                }


                window.addEventListener('scroll', function (e) {
                    var target = document.getElementById('textBox');
                    //target.onscroll = () => alert(target.scrollTop);
                });

                //JSONデータを引数に受け取ってDOM操作を行う関数を作成
                function Example(jsonObj) {
                    const parsedObj = JSON.parse(jsonObj);
                    textBox.innerHTML = parsedObj.body;
                    var main = document.getElementById('textBox');
                    main.scrollTop = parsedObj.scrollloc;
                    //textBox.innerHTML = "TEST";
                    //alert(textBox.innerHTML);

                    //title.value = parsedObj.title;
                    titlev = parsedObj.title;

                    updatedate.value = parsedObj.uploaddate;

                    //document.getElementById("p1").innerHTML = "New text!";
                    //document.getElementById("author").value = "New text!";
                    author.value = parsedObj.author;
                    //author.value = "TEST";
                    //Element.update(author.value, "hogehoge");
                    ///setTimeout(function () { author.value = "TEST"; }, 1);
                    //var item = $('author.value');
                    //Element.update(item, "hogehoge");


                    updatef = true;
                    var attach = parsedObj.attachfile;
                    if (attach.length > 0) {
                        document.getElementById("upload").innerHTML = "";
                        attach.split(',').forEach(function (value) {
                            addOption(value);
                        })

                    }
                    else {
                        document.getElementById("upload").innerHTML = "";
                        addNone();
                    }


                }

                //JSONデータを引数に受け取ってDOM操作を行う関数を作成
                function Example2(jsonObj) {
                    const parsedObj = JSON.parse(jsonObj);
                    textBox.innerHTML = parsedObj.body;

                    var link = parsedObj.attachlink;
                    link = link.replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;");
                    var winGoogle = window.open(link);
                    document.addEventListener("pagesloaded", function (e) {
                        arert("finished");
                    });
                }

                function Example3(jsonObj) {
                    const parsedObj = JSON.parse(jsonObj);
                    var attach = parsedObj.attachfile;
                    if (attach.length > 0) {
                        document.getElementById("upload").innerHTML = "";
                        attach.split(',').forEach(function (value) {
                            addOption(value);
                        })

                    }
                    else {
                        document.getElementById("upload").innerHTML = "";
                        addNone();
                    }


                }
                function addOption(value) {

                    // selectタグを取得する
                    var select = document.getElementById("upload");
                    // optionタグを作成する
                    var option = document.createElement("option");
                    // optionタグのテキストを4に設定する
                    option.text = value;
                    //option.text = "ファイル有り";
                    option.index = 1;
                    // selectタグの子要素にoptionタグを追加する
                    select.appendChild(option);
                    document.getElementById("uploadd").disabled = false;
                    document.getElementById("dropdownMenuButton2").disabled = false;
                    //document.getElementById("up").disabled = false;
                    //document.getElementById("down").disabled = false;
                    //document.getElementById("leftmove").disabled = false;
                    //document.getElementById("rightmove").disabled = false;
                }

                function addNone() {
                    // selectタグを取得する
                    var select = document.getElementById("upload");
                    // optionタグを作成する
                    var option = document.createElement("option");
                    // optionタグのテキストを4に設定する
                    option.text = "ファイル無し";
                    // selectタグの子要素にoptionタグを追加する
                    select.appendChild(option);
                    document.getElementById("uploadd").disabled = false;
                    document.getElementById("dropdownMenuButton2").disabled = false;
                    //document.getElementById("up").disabled = false;
                    //document.getElementById("down").disabled = false;
                    //document.getElementById("leftmove").disabled = false;
                    //document.getElementById("rightmove").disabled = false;
                }
                //修正中
                function TempSetting() {
                    const select = document.forms[2].ddProducts
                    const index = select.selectedIndex;

                    const form = document.forms[1];
                    FD = new FormData(form);
                    // データを FormData オブジェクトに投入します
                    FD.append("evnt", "upload1");
                    FD.append("indx", index);
                    // aysnchronous fetch ajax
                    fetch(form.action,
                        {
                            method: form.method,
                            body: FD
                        }
                    )
                        .then(response => document.location.reload())
                }
                function addItems() {
                    var numberOfItems = 5;
                    for (var i = 0; i < numberOfItems; i++) {
                        var ele = document.createElement("a");
                        ele.classList = "dropdown-item";
                        ele.href = "#";
                        ele.innerText = "" + i;
                        document.querySelector(".dropdown-menu").appendChild(ele);
                    }
                }
                function Attach(value) {
                    const select = document.forms[2].ddProducts
                    const index = select.selectedIndex;
                    if (value != "ファイル無し") {
                        const form = document.forms[2];
                        FD = new FormData(form);
                        // データを FormData オブジェクトに投入します
                        FD.append("evnt", "attach");
                        FD.append("attachname", value);
                        FD.append("indx", index);
                        // aysnchronous fetch ajax
                        fetch(form.action,
                            {
                                method: form.method,
                                body: FD
                            }
                        )
                            // if any exceptions - log them
                            .catch(err => console.log("network error: " + err))
                            .then((response) => {
                                return response.json()　//ここでBodyからJSONを返す
                            })
                            .then((result) => {
                                Example2(result);  //取得したJSONデータを関数に渡す
                            })
                    }
                }
                function showGenre1() {
                    if (titlev == "") {
                        document.getElementById("change").innerText = "変更するタイトルを入力してください。";
                        document.getElementById("title").value = @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(IndexModel.title)));
                        //
                    } else
                        document.getElementById("change").innerText = "変更するタイトルを入力してください。";
                }
                function showGenre2(item) {
                    /*newDoc();*/
                    if (titlev == "") {
                        document.getElementById("newtitle").innerText = "ドキュメントを追加します。";
                        document.getElementById("title2").value = @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(IndexModel.title)));
                        //
                    } else
                        document.getElementById("newtitle").innerText = "ドキュメントを追加します。";
                }
                function showGenre3(item1, item2) {
                    saveDoc(item1, item2);
                }
                function showGenre4() {
                    if (titlev == "") {
                        document.getElementById("deletetitle").innerText = "タイトル「" + @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(IndexModel.title))) + "」を削除します。";
                    } else
                        document.getElementById("deletetitle").innerText = "タイトル「" + titlev + "」を削除します。";
                }

                function TytleChange() {
                    var title = document.getElementById("title").value;
                    const form = document.forms[0];
                    FD = new FormData(form);
                    // データを FormData オブジェクトに投入します
                    FD.append("evnt", "tytlechanged2");
                    //FD.append("indx", "pass");
                    FD.append("title", title);
                    // aysnchronous fetch ajax
                    fetch(form.action,
                        {
                            method: form.method,
                            body: FD
                        }
                    )
                        // if any exceptions - log them
                        .catch(err => console.log("network error: " + err))
                        .then(response => {

                            // read json from the response stream
                            // and display the data
                            response.json().then(data => {
                                //textbox.innerHTML = data
                                document.location.reload();
                            });
                        })
                }
                function DeleteDoc() {

                    const form = document.forms[0];
                    FD = new FormData(form);
                    // データを FormData オブジェクトに投入します
                    FD.append("evnt", "deleted");

                    // aysnchronous fetch ajax
                    fetch(form.action,
                        {
                            method: form.method,
                            body: FD
                        }
                    )
                        // if any exceptions - log them
                        .catch(err => console.log("network error: " + err))
                        .then(response => {

                            // read json from the response stream
                            // and display the data
                            response.json().then(data => {
                                //textbox.innerHTML = data
                                document.location.reload();
                            });
                        })
                }
                $(document).ready(myHandler2);
                $("#textBox").on("click", myHandler2);
                function Expand() {
                    const form = document.forms[3];
                    FD = new FormData(form);
                    // データを FormData オブジェクトに投入します
                    FD.append("indx", 'pass');
                    FD.append("evnt", "expand2");

                    // aysnchronous fetch ajax
                    fetch(form.action,
                        {
                            method: form.method,
                            body: FD
                        }
                    )
                        // if any exceptions - log them
                        .catch(err => console.log("network error: " + err))
                        .then(response => {

                            // read json from the response stream
                            // and display the data
                            response.json().then(data => {
                                document.location.reload();
                            });
                        })
                }

                function Copy() {
                    if (switchBox.checked = true) {
                        var text = document.getElementById('textBox').innerText;
                    }
                    if (switchBox.checked = false) {
                        var text = document.getElementById('textBox').innerHTML;
                    }

                    navigator.clipboard.writeText(text).then(function () {
                        if (switchBox.checked = true) {
                            alert('テキストをクリップボードにコピーしました。');
                        }
                        if (switchBox.checked = false) {
                            alert('HTMLをクリップボードにコピーしました。');
                        }
                    }, function (err) {
                        alert('コピーエラー');
                    });
                }

            </script>

        </body>
    </head>
    </html>
}
@if (@IndexModel.screenmode == "upload1")
{
    { Response.Redirect("Upload"); }
}
@if (@IndexModel.screenmode == "upload2")
{
    { Response.Redirect("Upload"); }
}


